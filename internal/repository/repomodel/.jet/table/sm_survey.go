//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmSurvey = newSmSurveyTable("public", "sm_survey", "")

type smSurveyTable struct {
	postgres.Table

	// Columns
	ID                       postgres.ColumnInteger
	Name                     postgres.ColumnString
	UpdatedAt                postgres.ColumnTimestamp
	CreatedAt                postgres.ColumnTimestamp
	UpdatedBy                postgres.ColumnInteger
	CreatedBy                postgres.ColumnInteger
	StatusID                 postgres.ColumnInteger
	ProjectID                postgres.ColumnInteger
	MilestoneDay             postgres.ColumnInteger
	DateAttributeMilestoneID postgres.ColumnInteger
	SurveyDateStart          postgres.ColumnTimestamp
	SurveyDateEnd            postgres.ColumnTimestamp
	TimestartMilestone       postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmSurveyTable struct {
	smSurveyTable

	EXCLUDED smSurveyTable
}

// AS creates new SmSurveyTable with assigned alias
func (a SmSurveyTable) AS(alias string) *SmSurveyTable {
	return newSmSurveyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmSurveyTable with assigned schema name
func (a SmSurveyTable) FromSchema(schemaName string) *SmSurveyTable {
	return newSmSurveyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmSurveyTable with assigned table prefix
func (a SmSurveyTable) WithPrefix(prefix string) *SmSurveyTable {
	return newSmSurveyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmSurveyTable with assigned table suffix
func (a SmSurveyTable) WithSuffix(suffix string) *SmSurveyTable {
	return newSmSurveyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmSurveyTable(schemaName, tableName, alias string) *SmSurveyTable {
	return &SmSurveyTable{
		smSurveyTable: newSmSurveyTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newSmSurveyTableImpl("", "excluded", ""),
	}
}

func newSmSurveyTableImpl(schemaName, tableName, alias string) smSurveyTable {
	var (
		IDColumn                       = postgres.IntegerColumn("id")
		NameColumn                     = postgres.StringColumn("name")
		UpdatedAtColumn                = postgres.TimestampColumn("updated_at")
		CreatedAtColumn                = postgres.TimestampColumn("created_at")
		UpdatedByColumn                = postgres.IntegerColumn("updated_by")
		CreatedByColumn                = postgres.IntegerColumn("created_by")
		StatusIDColumn                 = postgres.IntegerColumn("status_id")
		ProjectIDColumn                = postgres.IntegerColumn("project_id")
		MilestoneDayColumn             = postgres.IntegerColumn("milestone_day")
		DateAttributeMilestoneIDColumn = postgres.IntegerColumn("date_attribute_milestone_id")
		SurveyDateStartColumn          = postgres.TimestampColumn("survey_date_start")
		SurveyDateEndColumn            = postgres.TimestampColumn("survey_date_end")
		TimestartMilestoneColumn       = postgres.TimestampColumn("timestart_milestone")
		allColumns                     = postgres.ColumnList{IDColumn, NameColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, StatusIDColumn, ProjectIDColumn, MilestoneDayColumn, DateAttributeMilestoneIDColumn, SurveyDateStartColumn, SurveyDateEndColumn, TimestartMilestoneColumn}
		mutableColumns                 = postgres.ColumnList{NameColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, StatusIDColumn, ProjectIDColumn, MilestoneDayColumn, DateAttributeMilestoneIDColumn, SurveyDateStartColumn, SurveyDateEndColumn, TimestartMilestoneColumn}
	)

	return smSurveyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		Name:                     NameColumn,
		UpdatedAt:                UpdatedAtColumn,
		CreatedAt:                CreatedAtColumn,
		UpdatedBy:                UpdatedByColumn,
		CreatedBy:                CreatedByColumn,
		StatusID:                 StatusIDColumn,
		ProjectID:                ProjectIDColumn,
		MilestoneDay:             MilestoneDayColumn,
		DateAttributeMilestoneID: DateAttributeMilestoneIDColumn,
		SurveyDateStart:          SurveyDateStartColumn,
		SurveyDateEnd:            SurveyDateEndColumn,
		TimestartMilestone:       TimestartMilestoneColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
