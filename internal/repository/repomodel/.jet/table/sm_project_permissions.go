//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmProjectPermissions = newSmProjectPermissionsTable("public", "sm_project_permissions", "")

type smProjectPermissionsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	ProjectID postgres.ColumnInteger
	RoleID    postgres.ColumnInteger
	UpdatedAt postgres.ColumnTimestamp
	CreatedBy postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestamp
	UpdatedBy postgres.ColumnInteger
	TypeID    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmProjectPermissionsTable struct {
	smProjectPermissionsTable

	EXCLUDED smProjectPermissionsTable
}

// AS creates new SmProjectPermissionsTable with assigned alias
func (a SmProjectPermissionsTable) AS(alias string) *SmProjectPermissionsTable {
	return newSmProjectPermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmProjectPermissionsTable with assigned schema name
func (a SmProjectPermissionsTable) FromSchema(schemaName string) *SmProjectPermissionsTable {
	return newSmProjectPermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmProjectPermissionsTable with assigned table prefix
func (a SmProjectPermissionsTable) WithPrefix(prefix string) *SmProjectPermissionsTable {
	return newSmProjectPermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmProjectPermissionsTable with assigned table suffix
func (a SmProjectPermissionsTable) WithSuffix(suffix string) *SmProjectPermissionsTable {
	return newSmProjectPermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmProjectPermissionsTable(schemaName, tableName, alias string) *SmProjectPermissionsTable {
	return &SmProjectPermissionsTable{
		smProjectPermissionsTable: newSmProjectPermissionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newSmProjectPermissionsTableImpl("", "excluded", ""),
	}
}

func newSmProjectPermissionsTableImpl(schemaName, tableName, alias string) smProjectPermissionsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ProjectIDColumn = postgres.IntegerColumn("project_id")
		RoleIDColumn    = postgres.IntegerColumn("role_id")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		CreatedByColumn = postgres.IntegerColumn("created_by")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedByColumn = postgres.IntegerColumn("updated_by")
		TypeIDColumn    = postgres.IntegerColumn("type_id")
		allColumns      = postgres.ColumnList{IDColumn, ProjectIDColumn, RoleIDColumn, UpdatedAtColumn, CreatedByColumn, CreatedAtColumn, UpdatedByColumn, TypeIDColumn}
		mutableColumns  = postgres.ColumnList{ProjectIDColumn, RoleIDColumn, UpdatedAtColumn, CreatedByColumn, CreatedAtColumn, UpdatedByColumn, TypeIDColumn}
	)

	return smProjectPermissionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ProjectID: ProjectIDColumn,
		RoleID:    RoleIDColumn,
		UpdatedAt: UpdatedAtColumn,
		CreatedBy: CreatedByColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedBy: UpdatedByColumn,
		TypeID:    TypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
