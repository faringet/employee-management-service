//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TemplTemplateQuestionary = newTemplTemplateQuestionaryTable("public", "templ_template_questionary", "")

type templTemplateQuestionaryTable struct {
	postgres.Table

	// Columns
	ID                    postgres.ColumnInteger
	UpdatedAt             postgres.ColumnTimestamp
	CreatedAt             postgres.ColumnTimestamp
	UpdatedBy             postgres.ColumnInteger
	CreatedBy             postgres.ColumnInteger
	Name                  postgres.ColumnString
	Description           postgres.ColumnString
	Estimation            postgres.ColumnString
	RecomendedFrequencyID postgres.ColumnInteger
	IstemplateER          postgres.ColumnBool
	TypeQuestionaryID     postgres.ColumnInteger
	Survey                postgres.ColumnString
	OwnerEntityID         postgres.ColumnInteger
	LogoID                postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TemplTemplateQuestionaryTable struct {
	templTemplateQuestionaryTable

	EXCLUDED templTemplateQuestionaryTable
}

// AS creates new TemplTemplateQuestionaryTable with assigned alias
func (a TemplTemplateQuestionaryTable) AS(alias string) *TemplTemplateQuestionaryTable {
	return newTemplTemplateQuestionaryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TemplTemplateQuestionaryTable with assigned schema name
func (a TemplTemplateQuestionaryTable) FromSchema(schemaName string) *TemplTemplateQuestionaryTable {
	return newTemplTemplateQuestionaryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TemplTemplateQuestionaryTable with assigned table prefix
func (a TemplTemplateQuestionaryTable) WithPrefix(prefix string) *TemplTemplateQuestionaryTable {
	return newTemplTemplateQuestionaryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TemplTemplateQuestionaryTable with assigned table suffix
func (a TemplTemplateQuestionaryTable) WithSuffix(suffix string) *TemplTemplateQuestionaryTable {
	return newTemplTemplateQuestionaryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTemplTemplateQuestionaryTable(schemaName, tableName, alias string) *TemplTemplateQuestionaryTable {
	return &TemplTemplateQuestionaryTable{
		templTemplateQuestionaryTable: newTemplTemplateQuestionaryTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newTemplTemplateQuestionaryTableImpl("", "excluded", ""),
	}
}

func newTemplTemplateQuestionaryTableImpl(schemaName, tableName, alias string) templTemplateQuestionaryTable {
	var (
		IDColumn                    = postgres.IntegerColumn("id")
		UpdatedAtColumn             = postgres.TimestampColumn("updated_at")
		CreatedAtColumn             = postgres.TimestampColumn("created_at")
		UpdatedByColumn             = postgres.IntegerColumn("updated_by")
		CreatedByColumn             = postgres.IntegerColumn("created_by")
		NameColumn                  = postgres.StringColumn("name")
		DescriptionColumn           = postgres.StringColumn("description")
		EstimationColumn            = postgres.StringColumn("estimation")
		RecomendedFrequencyIDColumn = postgres.IntegerColumn("recomended_frequency_id")
		IstemplateERColumn          = postgres.BoolColumn("istemplateER")
		TypeQuestionaryIDColumn     = postgres.IntegerColumn("type_questionary_id")
		SurveyColumn                = postgres.StringColumn("survey")
		OwnerEntityIDColumn         = postgres.IntegerColumn("owner_entity_id")
		LogoIDColumn                = postgres.IntegerColumn("logo_id")
		allColumns                  = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, NameColumn, DescriptionColumn, EstimationColumn, RecomendedFrequencyIDColumn, IstemplateERColumn, TypeQuestionaryIDColumn, SurveyColumn, OwnerEntityIDColumn, LogoIDColumn}
		mutableColumns              = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, NameColumn, DescriptionColumn, EstimationColumn, RecomendedFrequencyIDColumn, IstemplateERColumn, TypeQuestionaryIDColumn, SurveyColumn, OwnerEntityIDColumn, LogoIDColumn}
	)

	return templTemplateQuestionaryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		UpdatedAt:             UpdatedAtColumn,
		CreatedAt:             CreatedAtColumn,
		UpdatedBy:             UpdatedByColumn,
		CreatedBy:             CreatedByColumn,
		Name:                  NameColumn,
		Description:           DescriptionColumn,
		Estimation:            EstimationColumn,
		RecomendedFrequencyID: RecomendedFrequencyIDColumn,
		IstemplateER:          IstemplateERColumn,
		TypeQuestionaryID:     TypeQuestionaryIDColumn,
		Survey:                SurveyColumn,
		OwnerEntityID:         OwnerEntityIDColumn,
		LogoID:                LogoIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
