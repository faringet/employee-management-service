//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmSurveyRating = newSmSurveyRatingTable("public", "sm_survey_rating", "")

type smSurveyRatingTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	SurveyID    postgres.ColumnInteger
	Name        postgres.ColumnString
	OrderNumber postgres.ColumnInteger
	UpdatedAt   postgres.ColumnTimestamp
	CreatedBy   postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestamp
	UpdatedBy   postgres.ColumnInteger
	Score       postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmSurveyRatingTable struct {
	smSurveyRatingTable

	EXCLUDED smSurveyRatingTable
}

// AS creates new SmSurveyRatingTable with assigned alias
func (a SmSurveyRatingTable) AS(alias string) *SmSurveyRatingTable {
	return newSmSurveyRatingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmSurveyRatingTable with assigned schema name
func (a SmSurveyRatingTable) FromSchema(schemaName string) *SmSurveyRatingTable {
	return newSmSurveyRatingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmSurveyRatingTable with assigned table prefix
func (a SmSurveyRatingTable) WithPrefix(prefix string) *SmSurveyRatingTable {
	return newSmSurveyRatingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmSurveyRatingTable with assigned table suffix
func (a SmSurveyRatingTable) WithSuffix(suffix string) *SmSurveyRatingTable {
	return newSmSurveyRatingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmSurveyRatingTable(schemaName, tableName, alias string) *SmSurveyRatingTable {
	return &SmSurveyRatingTable{
		smSurveyRatingTable: newSmSurveyRatingTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSmSurveyRatingTableImpl("", "excluded", ""),
	}
}

func newSmSurveyRatingTableImpl(schemaName, tableName, alias string) smSurveyRatingTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		SurveyIDColumn    = postgres.IntegerColumn("survey_id")
		NameColumn        = postgres.StringColumn("name")
		OrderNumberColumn = postgres.IntegerColumn("order_number")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedByColumn   = postgres.IntegerColumn("updated_by")
		ScoreColumn       = postgres.IntegerColumn("score")
		allColumns        = postgres.ColumnList{IDColumn, SurveyIDColumn, NameColumn, OrderNumberColumn, UpdatedAtColumn, CreatedByColumn, CreatedAtColumn, UpdatedByColumn, ScoreColumn}
		mutableColumns    = postgres.ColumnList{SurveyIDColumn, NameColumn, OrderNumberColumn, UpdatedAtColumn, CreatedByColumn, CreatedAtColumn, UpdatedByColumn, ScoreColumn}
	)

	return smSurveyRatingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		SurveyID:    SurveyIDColumn,
		Name:        NameColumn,
		OrderNumber: OrderNumberColumn,
		UpdatedAt:   UpdatedAtColumn,
		CreatedBy:   CreatedByColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedBy:   UpdatedByColumn,
		Score:       ScoreColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
