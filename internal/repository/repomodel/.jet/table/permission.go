//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Permission = newPermissionTable("public", "permission", "")

type permissionTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnInteger
	Name                 postgres.ColumnString
	Code                 postgres.ColumnString
	Description          postgres.ColumnString
	PermissionCategoryID postgres.ColumnInteger
	OrderNumber          postgres.ColumnInteger
	CreatedAt            postgres.ColumnTimestamp
	UpdatedAt            postgres.ColumnTimestamp
	CreatedBy            postgres.ColumnInteger
	UpdatedBy            postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PermissionTable struct {
	permissionTable

	EXCLUDED permissionTable
}

// AS creates new PermissionTable with assigned alias
func (a PermissionTable) AS(alias string) *PermissionTable {
	return newPermissionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PermissionTable with assigned schema name
func (a PermissionTable) FromSchema(schemaName string) *PermissionTable {
	return newPermissionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PermissionTable with assigned table prefix
func (a PermissionTable) WithPrefix(prefix string) *PermissionTable {
	return newPermissionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PermissionTable with assigned table suffix
func (a PermissionTable) WithSuffix(suffix string) *PermissionTable {
	return newPermissionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPermissionTable(schemaName, tableName, alias string) *PermissionTable {
	return &PermissionTable{
		permissionTable: newPermissionTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newPermissionTableImpl("", "excluded", ""),
	}
}

func newPermissionTableImpl(schemaName, tableName, alias string) permissionTable {
	var (
		IDColumn                   = postgres.IntegerColumn("id")
		NameColumn                 = postgres.StringColumn("name")
		CodeColumn                 = postgres.StringColumn("code")
		DescriptionColumn          = postgres.StringColumn("description")
		PermissionCategoryIDColumn = postgres.IntegerColumn("permission_category_id")
		OrderNumberColumn          = postgres.IntegerColumn("order_number")
		CreatedAtColumn            = postgres.TimestampColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampColumn("updated_at")
		CreatedByColumn            = postgres.IntegerColumn("created_by")
		UpdatedByColumn            = postgres.IntegerColumn("updated_by")
		allColumns                 = postgres.ColumnList{IDColumn, NameColumn, CodeColumn, DescriptionColumn, PermissionCategoryIDColumn, OrderNumberColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
		mutableColumns             = postgres.ColumnList{NameColumn, CodeColumn, DescriptionColumn, PermissionCategoryIDColumn, OrderNumberColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
	)

	return permissionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Name:                 NameColumn,
		Code:                 CodeColumn,
		Description:          DescriptionColumn,
		PermissionCategoryID: PermissionCategoryIDColumn,
		OrderNumber:          OrderNumberColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		CreatedBy:            CreatedByColumn,
		UpdatedBy:            UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
