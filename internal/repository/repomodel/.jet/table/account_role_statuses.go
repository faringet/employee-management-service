//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AccountRoleStatuses = newAccountRoleStatusesTable("public", "account_role_statuses", "")

type accountRoleStatusesTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnInteger
	CreatedAt          postgres.ColumnTimestamp
	UpdatedAt          postgres.ColumnTimestamp
	CreatedBy          postgres.ColumnInteger
	UpdatedBy          postgres.ColumnInteger
	DateSentInvitation postgres.ColumnTimestamp
	DateAccept         postgres.ColumnTimestamp
	Active             postgres.ColumnBool
	DateExpired        postgres.ColumnTimestamp
	InviteStatusID     postgres.ColumnInteger
	UserID             postgres.ColumnInteger
	RoleID             postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountRoleStatusesTable struct {
	accountRoleStatusesTable

	EXCLUDED accountRoleStatusesTable
}

// AS creates new AccountRoleStatusesTable with assigned alias
func (a AccountRoleStatusesTable) AS(alias string) *AccountRoleStatusesTable {
	return newAccountRoleStatusesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountRoleStatusesTable with assigned schema name
func (a AccountRoleStatusesTable) FromSchema(schemaName string) *AccountRoleStatusesTable {
	return newAccountRoleStatusesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountRoleStatusesTable with assigned table prefix
func (a AccountRoleStatusesTable) WithPrefix(prefix string) *AccountRoleStatusesTable {
	return newAccountRoleStatusesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountRoleStatusesTable with assigned table suffix
func (a AccountRoleStatusesTable) WithSuffix(suffix string) *AccountRoleStatusesTable {
	return newAccountRoleStatusesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountRoleStatusesTable(schemaName, tableName, alias string) *AccountRoleStatusesTable {
	return &AccountRoleStatusesTable{
		accountRoleStatusesTable: newAccountRoleStatusesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newAccountRoleStatusesTableImpl("", "excluded", ""),
	}
}

func newAccountRoleStatusesTableImpl(schemaName, tableName, alias string) accountRoleStatusesTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		CreatedAtColumn          = postgres.TimestampColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampColumn("updated_at")
		CreatedByColumn          = postgres.IntegerColumn("created_by")
		UpdatedByColumn          = postgres.IntegerColumn("updated_by")
		DateSentInvitationColumn = postgres.TimestampColumn("date_sent_invitation")
		DateAcceptColumn         = postgres.TimestampColumn("date_accept")
		ActiveColumn             = postgres.BoolColumn("active")
		DateExpiredColumn        = postgres.TimestampColumn("date_expired")
		InviteStatusIDColumn     = postgres.IntegerColumn("invite_status_id")
		UserIDColumn             = postgres.IntegerColumn("user_id")
		RoleIDColumn             = postgres.IntegerColumn("role_id")
		allColumns               = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn, DateSentInvitationColumn, DateAcceptColumn, ActiveColumn, DateExpiredColumn, InviteStatusIDColumn, UserIDColumn, RoleIDColumn}
		mutableColumns           = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn, DateSentInvitationColumn, DateAcceptColumn, ActiveColumn, DateExpiredColumn, InviteStatusIDColumn, UserIDColumn, RoleIDColumn}
	)

	return accountRoleStatusesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		CreatedBy:          CreatedByColumn,
		UpdatedBy:          UpdatedByColumn,
		DateSentInvitation: DateSentInvitationColumn,
		DateAccept:         DateAcceptColumn,
		Active:             ActiveColumn,
		DateExpired:        DateExpiredColumn,
		InviteStatusID:     InviteStatusIDColumn,
		UserID:             UserIDColumn,
		RoleID:             RoleIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
