//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmSurveyRecepients = newSmSurveyRecepientsTable("public", "sm_survey_recepients", "")

type smSurveyRecepientsTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnInteger
	SurveyID             postgres.ColumnInteger
	EmployeeID           postgres.ColumnInteger
	Automatical          postgres.ColumnBool
	AccessCode           postgres.ColumnString
	UpdatedAt            postgres.ColumnTimestamp
	CreatedBy            postgres.ColumnInteger
	CreatedAt            postgres.ColumnTimestamp
	UpdatedBy            postgres.ColumnInteger
	CustomPreferredName  postgres.ColumnString
	CustomEmail          postgres.ColumnString
	FullName             postgres.ColumnString
	DateStartMilestone   postgres.ColumnTimestamp
	Answered             postgres.ColumnBool
	Answers              postgres.ColumnString
	NextReminderDatetime postgres.ColumnTimestamp
	ReminderID           postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmSurveyRecepientsTable struct {
	smSurveyRecepientsTable

	EXCLUDED smSurveyRecepientsTable
}

// AS creates new SmSurveyRecepientsTable with assigned alias
func (a SmSurveyRecepientsTable) AS(alias string) *SmSurveyRecepientsTable {
	return newSmSurveyRecepientsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmSurveyRecepientsTable with assigned schema name
func (a SmSurveyRecepientsTable) FromSchema(schemaName string) *SmSurveyRecepientsTable {
	return newSmSurveyRecepientsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmSurveyRecepientsTable with assigned table prefix
func (a SmSurveyRecepientsTable) WithPrefix(prefix string) *SmSurveyRecepientsTable {
	return newSmSurveyRecepientsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmSurveyRecepientsTable with assigned table suffix
func (a SmSurveyRecepientsTable) WithSuffix(suffix string) *SmSurveyRecepientsTable {
	return newSmSurveyRecepientsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmSurveyRecepientsTable(schemaName, tableName, alias string) *SmSurveyRecepientsTable {
	return &SmSurveyRecepientsTable{
		smSurveyRecepientsTable: newSmSurveyRecepientsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newSmSurveyRecepientsTableImpl("", "excluded", ""),
	}
}

func newSmSurveyRecepientsTableImpl(schemaName, tableName, alias string) smSurveyRecepientsTable {
	var (
		IDColumn                   = postgres.IntegerColumn("id")
		SurveyIDColumn             = postgres.IntegerColumn("survey_id")
		EmployeeIDColumn           = postgres.IntegerColumn("employee_id")
		AutomaticalColumn          = postgres.BoolColumn("automatical")
		AccessCodeColumn           = postgres.StringColumn("access_code")
		UpdatedAtColumn            = postgres.TimestampColumn("updated_at")
		CreatedByColumn            = postgres.IntegerColumn("created_by")
		CreatedAtColumn            = postgres.TimestampColumn("created_at")
		UpdatedByColumn            = postgres.IntegerColumn("updated_by")
		CustomPreferredNameColumn  = postgres.StringColumn("custom_preferred_name")
		CustomEmailColumn          = postgres.StringColumn("custom_email")
		FullNameColumn             = postgres.StringColumn("full_name")
		DateStartMilestoneColumn   = postgres.TimestampColumn("date_start_milestone")
		AnsweredColumn             = postgres.BoolColumn("answered")
		AnswersColumn              = postgres.StringColumn("answers")
		NextReminderDatetimeColumn = postgres.TimestampColumn("next_reminder_datetime")
		ReminderIDColumn           = postgres.IntegerColumn("reminder_id")
		allColumns                 = postgres.ColumnList{IDColumn, SurveyIDColumn, EmployeeIDColumn, AutomaticalColumn, AccessCodeColumn, UpdatedAtColumn, CreatedByColumn, CreatedAtColumn, UpdatedByColumn, CustomPreferredNameColumn, CustomEmailColumn, FullNameColumn, DateStartMilestoneColumn, AnsweredColumn, AnswersColumn, NextReminderDatetimeColumn, ReminderIDColumn}
		mutableColumns             = postgres.ColumnList{SurveyIDColumn, EmployeeIDColumn, AutomaticalColumn, AccessCodeColumn, UpdatedAtColumn, CreatedByColumn, CreatedAtColumn, UpdatedByColumn, CustomPreferredNameColumn, CustomEmailColumn, FullNameColumn, DateStartMilestoneColumn, AnsweredColumn, AnswersColumn, NextReminderDatetimeColumn, ReminderIDColumn}
	)

	return smSurveyRecepientsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		SurveyID:             SurveyIDColumn,
		EmployeeID:           EmployeeIDColumn,
		Automatical:          AutomaticalColumn,
		AccessCode:           AccessCodeColumn,
		UpdatedAt:            UpdatedAtColumn,
		CreatedBy:            CreatedByColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedBy:            UpdatedByColumn,
		CustomPreferredName:  CustomPreferredNameColumn,
		CustomEmail:          CustomEmailColumn,
		FullName:             FullNameColumn,
		DateStartMilestone:   DateStartMilestoneColumn,
		Answered:             AnsweredColumn,
		Answers:              AnswersColumn,
		NextReminderDatetime: NextReminderDatetimeColumn,
		ReminderID:           ReminderIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
