//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EntitiesIndustries = newEntitiesIndustriesTable("public", "entities_industries", "")

type entitiesIndustriesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	EntitiesID postgres.ColumnInteger
	IndustryID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EntitiesIndustriesTable struct {
	entitiesIndustriesTable

	EXCLUDED entitiesIndustriesTable
}

// AS creates new EntitiesIndustriesTable with assigned alias
func (a EntitiesIndustriesTable) AS(alias string) *EntitiesIndustriesTable {
	return newEntitiesIndustriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EntitiesIndustriesTable with assigned schema name
func (a EntitiesIndustriesTable) FromSchema(schemaName string) *EntitiesIndustriesTable {
	return newEntitiesIndustriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EntitiesIndustriesTable with assigned table prefix
func (a EntitiesIndustriesTable) WithPrefix(prefix string) *EntitiesIndustriesTable {
	return newEntitiesIndustriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EntitiesIndustriesTable with assigned table suffix
func (a EntitiesIndustriesTable) WithSuffix(suffix string) *EntitiesIndustriesTable {
	return newEntitiesIndustriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEntitiesIndustriesTable(schemaName, tableName, alias string) *EntitiesIndustriesTable {
	return &EntitiesIndustriesTable{
		entitiesIndustriesTable: newEntitiesIndustriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newEntitiesIndustriesTableImpl("", "excluded", ""),
	}
}

func newEntitiesIndustriesTableImpl(schemaName, tableName, alias string) entitiesIndustriesTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		EntitiesIDColumn = postgres.IntegerColumn("entities_id")
		IndustryIDColumn = postgres.IntegerColumn("industry_id")
		allColumns       = postgres.ColumnList{IDColumn, EntitiesIDColumn, IndustryIDColumn}
		mutableColumns   = postgres.ColumnList{EntitiesIDColumn, IndustryIDColumn}
	)

	return entitiesIndustriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		EntitiesID: EntitiesIDColumn,
		IndustryID: IndustryIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
