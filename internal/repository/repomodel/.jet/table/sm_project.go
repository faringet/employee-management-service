//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmProject = newSmProjectTable("public", "sm_project", "")

type smProjectTable struct {
	postgres.Table

	// Columns
	ID                       postgres.ColumnInteger
	Name                     postgres.ColumnString
	ProjecttypeID            postgres.ColumnInteger
	Test                     postgres.ColumnBool
	StatusID                 postgres.ColumnInteger
	MinResponses             postgres.ColumnInteger
	DateEnd                  postgres.ColumnTimestamp
	AccessLink               postgres.ColumnString
	UpdatedAt                postgres.ColumnTimestamp
	CreatedAt                postgres.ColumnTimestamp
	UpdatedBy                postgres.ColumnInteger
	CreatedBy                postgres.ColumnInteger
	EntityID                 postgres.ColumnInteger
	FrequencyID              postgres.ColumnInteger
	IsTriggersRequired       postgres.ColumnBool
	DateAttributeMilestoneID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmProjectTable struct {
	smProjectTable

	EXCLUDED smProjectTable
}

// AS creates new SmProjectTable with assigned alias
func (a SmProjectTable) AS(alias string) *SmProjectTable {
	return newSmProjectTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmProjectTable with assigned schema name
func (a SmProjectTable) FromSchema(schemaName string) *SmProjectTable {
	return newSmProjectTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmProjectTable with assigned table prefix
func (a SmProjectTable) WithPrefix(prefix string) *SmProjectTable {
	return newSmProjectTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmProjectTable with assigned table suffix
func (a SmProjectTable) WithSuffix(suffix string) *SmProjectTable {
	return newSmProjectTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmProjectTable(schemaName, tableName, alias string) *SmProjectTable {
	return &SmProjectTable{
		smProjectTable: newSmProjectTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newSmProjectTableImpl("", "excluded", ""),
	}
}

func newSmProjectTableImpl(schemaName, tableName, alias string) smProjectTable {
	var (
		IDColumn                       = postgres.IntegerColumn("id")
		NameColumn                     = postgres.StringColumn("name")
		ProjecttypeIDColumn            = postgres.IntegerColumn("projecttype_id")
		TestColumn                     = postgres.BoolColumn("test")
		StatusIDColumn                 = postgres.IntegerColumn("status_id")
		MinResponsesColumn             = postgres.IntegerColumn("min_responses")
		DateEndColumn                  = postgres.TimestampColumn("date_end")
		AccessLinkColumn               = postgres.StringColumn("access_link")
		UpdatedAtColumn                = postgres.TimestampColumn("updated_at")
		CreatedAtColumn                = postgres.TimestampColumn("created_at")
		UpdatedByColumn                = postgres.IntegerColumn("updated_by")
		CreatedByColumn                = postgres.IntegerColumn("created_by")
		EntityIDColumn                 = postgres.IntegerColumn("entity_id")
		FrequencyIDColumn              = postgres.IntegerColumn("frequency_id")
		IsTriggersRequiredColumn       = postgres.BoolColumn("is_triggers_required")
		DateAttributeMilestoneIDColumn = postgres.IntegerColumn("date_attribute_milestone_id")
		allColumns                     = postgres.ColumnList{IDColumn, NameColumn, ProjecttypeIDColumn, TestColumn, StatusIDColumn, MinResponsesColumn, DateEndColumn, AccessLinkColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, EntityIDColumn, FrequencyIDColumn, IsTriggersRequiredColumn, DateAttributeMilestoneIDColumn}
		mutableColumns                 = postgres.ColumnList{NameColumn, ProjecttypeIDColumn, TestColumn, StatusIDColumn, MinResponsesColumn, DateEndColumn, AccessLinkColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, EntityIDColumn, FrequencyIDColumn, IsTriggersRequiredColumn, DateAttributeMilestoneIDColumn}
	)

	return smProjectTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		Name:                     NameColumn,
		ProjecttypeID:            ProjecttypeIDColumn,
		Test:                     TestColumn,
		StatusID:                 StatusIDColumn,
		MinResponses:             MinResponsesColumn,
		DateEnd:                  DateEndColumn,
		AccessLink:               AccessLinkColumn,
		UpdatedAt:                UpdatedAtColumn,
		CreatedAt:                CreatedAtColumn,
		UpdatedBy:                UpdatedByColumn,
		CreatedBy:                CreatedByColumn,
		EntityID:                 EntityIDColumn,
		FrequencyID:              FrequencyIDColumn,
		IsTriggersRequired:       IsTriggersRequiredColumn,
		DateAttributeMilestoneID: DateAttributeMilestoneIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
