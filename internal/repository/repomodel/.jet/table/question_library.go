//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var QuestionLibrary = newQuestionLibraryTable("public", "question_library", "")

type questionLibraryTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	UpdatedAt           postgres.ColumnTimestamp
	CreatedAt           postgres.ColumnTimestamp
	UpdatedBy           postgres.ColumnInteger
	CreatedBy           postgres.ColumnInteger
	Name                postgres.ColumnString
	Title               postgres.ColumnString
	IsQuestionCondition postgres.ColumnBool
	IsCalculateScore    postgres.ColumnBool
	TypeQuestionID      postgres.ColumnInteger
	DimensionID         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type QuestionLibraryTable struct {
	questionLibraryTable

	EXCLUDED questionLibraryTable
}

// AS creates new QuestionLibraryTable with assigned alias
func (a QuestionLibraryTable) AS(alias string) *QuestionLibraryTable {
	return newQuestionLibraryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuestionLibraryTable with assigned schema name
func (a QuestionLibraryTable) FromSchema(schemaName string) *QuestionLibraryTable {
	return newQuestionLibraryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuestionLibraryTable with assigned table prefix
func (a QuestionLibraryTable) WithPrefix(prefix string) *QuestionLibraryTable {
	return newQuestionLibraryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuestionLibraryTable with assigned table suffix
func (a QuestionLibraryTable) WithSuffix(suffix string) *QuestionLibraryTable {
	return newQuestionLibraryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuestionLibraryTable(schemaName, tableName, alias string) *QuestionLibraryTable {
	return &QuestionLibraryTable{
		questionLibraryTable: newQuestionLibraryTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newQuestionLibraryTableImpl("", "excluded", ""),
	}
}

func newQuestionLibraryTableImpl(schemaName, tableName, alias string) questionLibraryTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		UpdatedAtColumn           = postgres.TimestampColumn("updated_at")
		CreatedAtColumn           = postgres.TimestampColumn("created_at")
		UpdatedByColumn           = postgres.IntegerColumn("updated_by")
		CreatedByColumn           = postgres.IntegerColumn("created_by")
		NameColumn                = postgres.StringColumn("name")
		TitleColumn               = postgres.StringColumn("title")
		IsQuestionConditionColumn = postgres.BoolColumn("isQuestionCondition")
		IsCalculateScoreColumn    = postgres.BoolColumn("isCalculateScore")
		TypeQuestionIDColumn      = postgres.IntegerColumn("type_question_id")
		DimensionIDColumn         = postgres.IntegerColumn("dimension_id")
		allColumns                = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, NameColumn, TitleColumn, IsQuestionConditionColumn, IsCalculateScoreColumn, TypeQuestionIDColumn, DimensionIDColumn}
		mutableColumns            = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, NameColumn, TitleColumn, IsQuestionConditionColumn, IsCalculateScoreColumn, TypeQuestionIDColumn, DimensionIDColumn}
	)

	return questionLibraryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		UpdatedAt:           UpdatedAtColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedBy:           UpdatedByColumn,
		CreatedBy:           CreatedByColumn,
		Name:                NameColumn,
		Title:               TitleColumn,
		IsQuestionCondition: IsQuestionConditionColumn,
		IsCalculateScore:    IsCalculateScoreColumn,
		TypeQuestionID:      TypeQuestionIDColumn,
		DimensionID:         DimensionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
