//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TemplCommsReminder = newTemplCommsReminderTable("public", "templ_comms_reminder", "")

type templCommsReminderTable struct {
	postgres.Table

	// Columns
	ID                        postgres.ColumnInteger
	UpdatedAt                 postgres.ColumnTimestamp
	CreatedAt                 postgres.ColumnTimestamp
	UpdatedBy                 postgres.ColumnInteger
	CreatedBy                 postgres.ColumnInteger
	TemplateID                postgres.ColumnInteger
	ReminderRecipientsgroupID postgres.ColumnInteger
	RemindersDaysID           postgres.ColumnInteger
	TimeSendReminder          postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TemplCommsReminderTable struct {
	templCommsReminderTable

	EXCLUDED templCommsReminderTable
}

// AS creates new TemplCommsReminderTable with assigned alias
func (a TemplCommsReminderTable) AS(alias string) *TemplCommsReminderTable {
	return newTemplCommsReminderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TemplCommsReminderTable with assigned schema name
func (a TemplCommsReminderTable) FromSchema(schemaName string) *TemplCommsReminderTable {
	return newTemplCommsReminderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TemplCommsReminderTable with assigned table prefix
func (a TemplCommsReminderTable) WithPrefix(prefix string) *TemplCommsReminderTable {
	return newTemplCommsReminderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TemplCommsReminderTable with assigned table suffix
func (a TemplCommsReminderTable) WithSuffix(suffix string) *TemplCommsReminderTable {
	return newTemplCommsReminderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTemplCommsReminderTable(schemaName, tableName, alias string) *TemplCommsReminderTable {
	return &TemplCommsReminderTable{
		templCommsReminderTable: newTemplCommsReminderTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newTemplCommsReminderTableImpl("", "excluded", ""),
	}
}

func newTemplCommsReminderTableImpl(schemaName, tableName, alias string) templCommsReminderTable {
	var (
		IDColumn                        = postgres.IntegerColumn("id")
		UpdatedAtColumn                 = postgres.TimestampColumn("updated_at")
		CreatedAtColumn                 = postgres.TimestampColumn("created_at")
		UpdatedByColumn                 = postgres.IntegerColumn("updated_by")
		CreatedByColumn                 = postgres.IntegerColumn("created_by")
		TemplateIDColumn                = postgres.IntegerColumn("template_id")
		ReminderRecipientsgroupIDColumn = postgres.IntegerColumn("reminder_recipientsgroup_id")
		RemindersDaysIDColumn           = postgres.IntegerColumn("reminders_days_id")
		TimeSendReminderColumn          = postgres.TimestampColumn("time_send_reminder")
		allColumns                      = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, TemplateIDColumn, ReminderRecipientsgroupIDColumn, RemindersDaysIDColumn, TimeSendReminderColumn}
		mutableColumns                  = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, TemplateIDColumn, ReminderRecipientsgroupIDColumn, RemindersDaysIDColumn, TimeSendReminderColumn}
	)

	return templCommsReminderTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		UpdatedAt:                 UpdatedAtColumn,
		CreatedAt:                 CreatedAtColumn,
		UpdatedBy:                 UpdatedByColumn,
		CreatedBy:                 CreatedByColumn,
		TemplateID:                TemplateIDColumn,
		ReminderRecipientsgroupID: ReminderRecipientsgroupIDColumn,
		RemindersDaysID:           RemindersDaysIDColumn,
		TimeSendReminder:          TimeSendReminderColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
