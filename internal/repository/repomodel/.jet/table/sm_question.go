//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmQuestion = newSmQuestionTable("public", "sm_question", "")

type smQuestionTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	UpdatedAt           postgres.ColumnTimestamp
	CreatedAt           postgres.ColumnTimestamp
	UpdatedBy           postgres.ColumnInteger
	CreatedBy           postgres.ColumnInteger
	Name                postgres.ColumnString
	Title               postgres.ColumnString
	IsQuestionCondition postgres.ColumnBool
	IsCalculateScore    postgres.ColumnBool
	TypeQuestionID      postgres.ColumnInteger
	DimensionID         postgres.ColumnInteger
	SurveyID            postgres.ColumnInteger
	QuestionJson        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmQuestionTable struct {
	smQuestionTable

	EXCLUDED smQuestionTable
}

// AS creates new SmQuestionTable with assigned alias
func (a SmQuestionTable) AS(alias string) *SmQuestionTable {
	return newSmQuestionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmQuestionTable with assigned schema name
func (a SmQuestionTable) FromSchema(schemaName string) *SmQuestionTable {
	return newSmQuestionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmQuestionTable with assigned table prefix
func (a SmQuestionTable) WithPrefix(prefix string) *SmQuestionTable {
	return newSmQuestionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmQuestionTable with assigned table suffix
func (a SmQuestionTable) WithSuffix(suffix string) *SmQuestionTable {
	return newSmQuestionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmQuestionTable(schemaName, tableName, alias string) *SmQuestionTable {
	return &SmQuestionTable{
		smQuestionTable: newSmQuestionTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newSmQuestionTableImpl("", "excluded", ""),
	}
}

func newSmQuestionTableImpl(schemaName, tableName, alias string) smQuestionTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		UpdatedAtColumn           = postgres.TimestampColumn("updated_at")
		CreatedAtColumn           = postgres.TimestampColumn("created_at")
		UpdatedByColumn           = postgres.IntegerColumn("updated_by")
		CreatedByColumn           = postgres.IntegerColumn("created_by")
		NameColumn                = postgres.StringColumn("name")
		TitleColumn               = postgres.StringColumn("title")
		IsQuestionConditionColumn = postgres.BoolColumn("isQuestionCondition")
		IsCalculateScoreColumn    = postgres.BoolColumn("isCalculateScore")
		TypeQuestionIDColumn      = postgres.IntegerColumn("type_question_id")
		DimensionIDColumn         = postgres.IntegerColumn("dimension_id")
		SurveyIDColumn            = postgres.IntegerColumn("survey_id")
		QuestionJsonColumn        = postgres.StringColumn("questionJson")
		allColumns                = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, NameColumn, TitleColumn, IsQuestionConditionColumn, IsCalculateScoreColumn, TypeQuestionIDColumn, DimensionIDColumn, SurveyIDColumn, QuestionJsonColumn}
		mutableColumns            = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, NameColumn, TitleColumn, IsQuestionConditionColumn, IsCalculateScoreColumn, TypeQuestionIDColumn, DimensionIDColumn, SurveyIDColumn, QuestionJsonColumn}
	)

	return smQuestionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		UpdatedAt:           UpdatedAtColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedBy:           UpdatedByColumn,
		CreatedBy:           CreatedByColumn,
		Name:                NameColumn,
		Title:               TitleColumn,
		IsQuestionCondition: IsQuestionConditionColumn,
		IsCalculateScore:    IsCalculateScoreColumn,
		TypeQuestionID:      TypeQuestionIDColumn,
		DimensionID:         DimensionIDColumn,
		SurveyID:            SurveyIDColumn,
		QuestionJson:        QuestionJsonColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
