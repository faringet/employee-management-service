//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmProjectFrequency = newSmProjectFrequencyTable("public", "sm_project_frequency", "")

type smProjectFrequencyTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UpdatedAt postgres.ColumnTimestamp
	CreatedAt postgres.ColumnTimestamp
	UpdatedBy postgres.ColumnInteger
	CreatedBy postgres.ColumnInteger
	Cron      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmProjectFrequencyTable struct {
	smProjectFrequencyTable

	EXCLUDED smProjectFrequencyTable
}

// AS creates new SmProjectFrequencyTable with assigned alias
func (a SmProjectFrequencyTable) AS(alias string) *SmProjectFrequencyTable {
	return newSmProjectFrequencyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmProjectFrequencyTable with assigned schema name
func (a SmProjectFrequencyTable) FromSchema(schemaName string) *SmProjectFrequencyTable {
	return newSmProjectFrequencyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmProjectFrequencyTable with assigned table prefix
func (a SmProjectFrequencyTable) WithPrefix(prefix string) *SmProjectFrequencyTable {
	return newSmProjectFrequencyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmProjectFrequencyTable with assigned table suffix
func (a SmProjectFrequencyTable) WithSuffix(suffix string) *SmProjectFrequencyTable {
	return newSmProjectFrequencyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmProjectFrequencyTable(schemaName, tableName, alias string) *SmProjectFrequencyTable {
	return &SmProjectFrequencyTable{
		smProjectFrequencyTable: newSmProjectFrequencyTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newSmProjectFrequencyTableImpl("", "excluded", ""),
	}
}

func newSmProjectFrequencyTableImpl(schemaName, tableName, alias string) smProjectFrequencyTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedByColumn = postgres.IntegerColumn("updated_by")
		CreatedByColumn = postgres.IntegerColumn("created_by")
		CronColumn      = postgres.StringColumn("cron")
		allColumns      = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, CronColumn}
		mutableColumns  = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, CronColumn}
	)

	return smProjectFrequencyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UpdatedAt: UpdatedAtColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedBy: UpdatedByColumn,
		CreatedBy: CreatedByColumn,
		Cron:      CronColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
