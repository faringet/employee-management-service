//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Employees = newEmployeesTable("public", "employees", "")

type employeesTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	FullName      postgres.ColumnString
	UniqueID      postgres.ColumnString
	UpdatedAt     postgres.ColumnTimestamp
	CreatedAt     postgres.ColumnTimestamp
	UpdatedBy     postgres.ColumnInteger
	CreatedBy     postgres.ColumnInteger
	Email         postgres.ColumnString
	ManagerEmail  postgres.ColumnString
	PreferredName postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmployeesTable struct {
	employeesTable

	EXCLUDED employeesTable
}

// AS creates new EmployeesTable with assigned alias
func (a EmployeesTable) AS(alias string) *EmployeesTable {
	return newEmployeesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmployeesTable with assigned schema name
func (a EmployeesTable) FromSchema(schemaName string) *EmployeesTable {
	return newEmployeesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmployeesTable with assigned table prefix
func (a EmployeesTable) WithPrefix(prefix string) *EmployeesTable {
	return newEmployeesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmployeesTable with assigned table suffix
func (a EmployeesTable) WithSuffix(suffix string) *EmployeesTable {
	return newEmployeesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmployeesTable(schemaName, tableName, alias string) *EmployeesTable {
	return &EmployeesTable{
		employeesTable: newEmployeesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newEmployeesTableImpl("", "excluded", ""),
	}
}

func newEmployeesTableImpl(schemaName, tableName, alias string) employeesTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		FullNameColumn      = postgres.StringColumn("full_name")
		UniqueIDColumn      = postgres.StringColumn("unique_id")
		UpdatedAtColumn     = postgres.TimestampColumn("updated_at")
		CreatedAtColumn     = postgres.TimestampColumn("created_at")
		UpdatedByColumn     = postgres.IntegerColumn("updated_by")
		CreatedByColumn     = postgres.IntegerColumn("created_by")
		EmailColumn         = postgres.StringColumn("email")
		ManagerEmailColumn  = postgres.StringColumn("manager_email")
		PreferredNameColumn = postgres.StringColumn("preferred_name")
		allColumns          = postgres.ColumnList{IDColumn, FullNameColumn, UniqueIDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, EmailColumn, ManagerEmailColumn, PreferredNameColumn}
		mutableColumns      = postgres.ColumnList{FullNameColumn, UniqueIDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, EmailColumn, ManagerEmailColumn, PreferredNameColumn}
	)

	return employeesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		FullName:      FullNameColumn,
		UniqueID:      UniqueIDColumn,
		UpdatedAt:     UpdatedAtColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedBy:     UpdatedByColumn,
		CreatedBy:     CreatedByColumn,
		Email:         EmailColumn,
		ManagerEmail:  ManagerEmailColumn,
		PreferredName: PreferredNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
