//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmCommsFooter = newSmCommsFooterTable("public", "sm_comms_footer", "")

type smCommsFooterTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	UpdatedAt   postgres.ColumnTimestamp
	CreatedAt   postgres.ColumnTimestamp
	UpdatedBy   postgres.ColumnInteger
	CreatedBy   postgres.ColumnInteger
	FooterEmail postgres.ColumnString
	LanguageID  postgres.ColumnInteger
	SurveyID    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmCommsFooterTable struct {
	smCommsFooterTable

	EXCLUDED smCommsFooterTable
}

// AS creates new SmCommsFooterTable with assigned alias
func (a SmCommsFooterTable) AS(alias string) *SmCommsFooterTable {
	return newSmCommsFooterTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmCommsFooterTable with assigned schema name
func (a SmCommsFooterTable) FromSchema(schemaName string) *SmCommsFooterTable {
	return newSmCommsFooterTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmCommsFooterTable with assigned table prefix
func (a SmCommsFooterTable) WithPrefix(prefix string) *SmCommsFooterTable {
	return newSmCommsFooterTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmCommsFooterTable with assigned table suffix
func (a SmCommsFooterTable) WithSuffix(suffix string) *SmCommsFooterTable {
	return newSmCommsFooterTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmCommsFooterTable(schemaName, tableName, alias string) *SmCommsFooterTable {
	return &SmCommsFooterTable{
		smCommsFooterTable: newSmCommsFooterTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newSmCommsFooterTableImpl("", "excluded", ""),
	}
}

func newSmCommsFooterTableImpl(schemaName, tableName, alias string) smCommsFooterTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedByColumn   = postgres.IntegerColumn("updated_by")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		FooterEmailColumn = postgres.StringColumn("footer_email")
		LanguageIDColumn  = postgres.IntegerColumn("language_id")
		SurveyIDColumn    = postgres.IntegerColumn("survey_id")
		allColumns        = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, FooterEmailColumn, LanguageIDColumn, SurveyIDColumn}
		mutableColumns    = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, FooterEmailColumn, LanguageIDColumn, SurveyIDColumn}
	)

	return smCommsFooterTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UpdatedAt:   UpdatedAtColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedBy:   UpdatedByColumn,
		CreatedBy:   CreatedByColumn,
		FooterEmail: FooterEmailColumn,
		LanguageID:  LanguageIDColumn,
		SurveyID:    SurveyIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
