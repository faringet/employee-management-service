//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AssetsImages = newAssetsImagesTable("public", "assets_images", "")

type assetsImagesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	RegionID   postgres.ColumnInteger
	Division   postgres.ColumnString
	DivisionID postgres.ColumnInteger
	Name       postgres.ColumnString
	URL        postgres.ColumnString
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	CreatedBy  postgres.ColumnInteger
	UpdatedBy  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AssetsImagesTable struct {
	assetsImagesTable

	EXCLUDED assetsImagesTable
}

// AS creates new AssetsImagesTable with assigned alias
func (a AssetsImagesTable) AS(alias string) *AssetsImagesTable {
	return newAssetsImagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AssetsImagesTable with assigned schema name
func (a AssetsImagesTable) FromSchema(schemaName string) *AssetsImagesTable {
	return newAssetsImagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AssetsImagesTable with assigned table prefix
func (a AssetsImagesTable) WithPrefix(prefix string) *AssetsImagesTable {
	return newAssetsImagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AssetsImagesTable with assigned table suffix
func (a AssetsImagesTable) WithSuffix(suffix string) *AssetsImagesTable {
	return newAssetsImagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAssetsImagesTable(schemaName, tableName, alias string) *AssetsImagesTable {
	return &AssetsImagesTable{
		assetsImagesTable: newAssetsImagesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newAssetsImagesTableImpl("", "excluded", ""),
	}
}

func newAssetsImagesTableImpl(schemaName, tableName, alias string) assetsImagesTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		RegionIDColumn   = postgres.IntegerColumn("region_id")
		DivisionColumn   = postgres.StringColumn("division")
		DivisionIDColumn = postgres.IntegerColumn("division_id")
		NameColumn       = postgres.StringColumn("name")
		URLColumn        = postgres.StringColumn("url")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		CreatedByColumn  = postgres.IntegerColumn("created_by")
		UpdatedByColumn  = postgres.IntegerColumn("updated_by")
		allColumns       = postgres.ColumnList{IDColumn, RegionIDColumn, DivisionColumn, DivisionIDColumn, NameColumn, URLColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
		mutableColumns   = postgres.ColumnList{RegionIDColumn, DivisionColumn, DivisionIDColumn, NameColumn, URLColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
	)

	return assetsImagesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		RegionID:   RegionIDColumn,
		Division:   DivisionColumn,
		DivisionID: DivisionIDColumn,
		Name:       NameColumn,
		URL:        URLColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		CreatedBy:  CreatedByColumn,
		UpdatedBy:  UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
