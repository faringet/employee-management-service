//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EntitiesSubIndustries = newEntitiesSubIndustriesTable("public", "entities_sub_industries", "")

type entitiesSubIndustriesTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	EntitiesID      postgres.ColumnInteger
	SubIndustriesID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EntitiesSubIndustriesTable struct {
	entitiesSubIndustriesTable

	EXCLUDED entitiesSubIndustriesTable
}

// AS creates new EntitiesSubIndustriesTable with assigned alias
func (a EntitiesSubIndustriesTable) AS(alias string) *EntitiesSubIndustriesTable {
	return newEntitiesSubIndustriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EntitiesSubIndustriesTable with assigned schema name
func (a EntitiesSubIndustriesTable) FromSchema(schemaName string) *EntitiesSubIndustriesTable {
	return newEntitiesSubIndustriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EntitiesSubIndustriesTable with assigned table prefix
func (a EntitiesSubIndustriesTable) WithPrefix(prefix string) *EntitiesSubIndustriesTable {
	return newEntitiesSubIndustriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EntitiesSubIndustriesTable with assigned table suffix
func (a EntitiesSubIndustriesTable) WithSuffix(suffix string) *EntitiesSubIndustriesTable {
	return newEntitiesSubIndustriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEntitiesSubIndustriesTable(schemaName, tableName, alias string) *EntitiesSubIndustriesTable {
	return &EntitiesSubIndustriesTable{
		entitiesSubIndustriesTable: newEntitiesSubIndustriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                   newEntitiesSubIndustriesTableImpl("", "excluded", ""),
	}
}

func newEntitiesSubIndustriesTableImpl(schemaName, tableName, alias string) entitiesSubIndustriesTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		EntitiesIDColumn      = postgres.IntegerColumn("entities_id")
		SubIndustriesIDColumn = postgres.IntegerColumn("sub_industries_id")
		allColumns            = postgres.ColumnList{IDColumn, EntitiesIDColumn, SubIndustriesIDColumn}
		mutableColumns        = postgres.ColumnList{EntitiesIDColumn, SubIndustriesIDColumn}
	)

	return entitiesSubIndustriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		EntitiesID:      EntitiesIDColumn,
		SubIndustriesID: SubIndustriesIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
