//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EmployeeOptionAttributes = newEmployeeOptionAttributesTable("public", "employee_option_attributes", "")

type employeeOptionAttributesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Value       postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp
	CreatedBy  postgres.ColumnInteger
	UpdatedBy  postgres.ColumnInteger

	AttributeID postgres.ColumnInteger
	EmployeeID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmployeeOptionAttributesTable struct {
	employeeOptionAttributesTable

	EXCLUDED employeeOptionAttributesTable
}

// AS creates new EmployeeOptionAttributesTable with assigned alias
func (a EmployeeOptionAttributesTable) AS(alias string) *EmployeeOptionAttributesTable {
	return newEmployeeOptionAttributesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmployeeOptionAttributesTable with assigned schema name
func (a EmployeeOptionAttributesTable) FromSchema(schemaName string) *EmployeeOptionAttributesTable {
	return newEmployeeOptionAttributesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmployeeOptionAttributesTable with assigned table prefix
func (a EmployeeOptionAttributesTable) WithPrefix(prefix string) *EmployeeOptionAttributesTable {
	return newEmployeeOptionAttributesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmployeeOptionAttributesTable with assigned table suffix
func (a EmployeeOptionAttributesTable) WithSuffix(suffix string) *EmployeeOptionAttributesTable {
	return newEmployeeOptionAttributesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmployeeOptionAttributesTable(schemaName, tableName, alias string) *EmployeeOptionAttributesTable {
	return &EmployeeOptionAttributesTable{
		employeeOptionAttributesTable: newEmployeeOptionAttributesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newEmployeeOptionAttributesTableImpl("", "excluded", ""),
	}
}

func newEmployeeOptionAttributesTableImpl(schemaName, tableName, alias string) employeeOptionAttributesTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		ValueColumn       = postgres.StringColumn("value")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		AttributeIDColumn = postgres.IntegerColumn("attribute_id")
		EmployeeIDColumn  = postgres.IntegerColumn("employee_id")
		allColumns        = postgres.ColumnList{IDColumn, ValueColumn, CreatedAtColumn, UpdatedAtColumn, AttributeIDColumn, EmployeeIDColumn}
		mutableColumns    = postgres.ColumnList{ValueColumn, CreatedAtColumn, UpdatedAtColumn, AttributeIDColumn, EmployeeIDColumn}
	)

	return employeeOptionAttributesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Value:       ValueColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		AttributeID: AttributeIDColumn,
		EmployeeID:  EmployeeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
