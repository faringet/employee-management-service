//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Entity = newEntityTable("public", "entity", "")

type entityTable struct {
	postgres.Table

	// Columns
	ID                           postgres.ColumnInteger
	Name                         postgres.ColumnString
	WorkspaceID                  postgres.ColumnInteger
	CompanyStatusID              postgres.ColumnInteger
	CustomerStatusID             postgres.ColumnInteger
	OrganizationSizeCategoriesID postgres.ColumnInteger
	BoldBiSiteName               postgres.ColumnString
	Details                      postgres.ColumnString
	ImportLock                   postgres.ColumnBool
	CreatedBy                    postgres.ColumnInteger
	UpdatedBy                    postgres.ColumnInteger
	CreatedAt                    postgres.ColumnTimestamp
	UpdatedAt                    postgres.ColumnTimestamp
	LogoID                       postgres.ColumnInteger
	IDOrgstructure               postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EntityTable struct {
	entityTable

	EXCLUDED entityTable
}

// AS creates new EntityTable with assigned alias
func (a EntityTable) AS(alias string) *EntityTable {
	return newEntityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EntityTable with assigned schema name
func (a EntityTable) FromSchema(schemaName string) *EntityTable {
	return newEntityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EntityTable with assigned table prefix
func (a EntityTable) WithPrefix(prefix string) *EntityTable {
	return newEntityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EntityTable with assigned table suffix
func (a EntityTable) WithSuffix(suffix string) *EntityTable {
	return newEntityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEntityTable(schemaName, tableName, alias string) *EntityTable {
	return &EntityTable{
		entityTable: newEntityTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newEntityTableImpl("", "excluded", ""),
	}
}

func newEntityTableImpl(schemaName, tableName, alias string) entityTable {
	var (
		IDColumn                           = postgres.IntegerColumn("id")
		NameColumn                         = postgres.StringColumn("name")
		WorkspaceIDColumn                  = postgres.IntegerColumn("workspace_id")
		CompanyStatusIDColumn              = postgres.IntegerColumn("company_status_id")
		CustomerStatusIDColumn             = postgres.IntegerColumn("customer_status_id")
		OrganizationSizeCategoriesIDColumn = postgres.IntegerColumn("organization_size_categories_id")
		BoldBiSiteNameColumn               = postgres.StringColumn("bold_bi_site_name")
		DetailsColumn                      = postgres.StringColumn("details")
		ImportLockColumn                   = postgres.BoolColumn("import_lock")
		CreatedByColumn                    = postgres.IntegerColumn("created_by")
		UpdatedByColumn                    = postgres.IntegerColumn("updated_by")
		CreatedAtColumn                    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                    = postgres.TimestampColumn("updated_at")
		LogoIDColumn                       = postgres.IntegerColumn("logo_id")
		IDOrgstructureColumn               = postgres.IntegerColumn("id_orgstructure")
		allColumns                         = postgres.ColumnList{IDColumn, NameColumn, WorkspaceIDColumn, CompanyStatusIDColumn, CustomerStatusIDColumn, OrganizationSizeCategoriesIDColumn, BoldBiSiteNameColumn, DetailsColumn, ImportLockColumn, CreatedByColumn, UpdatedByColumn, CreatedAtColumn, UpdatedAtColumn, LogoIDColumn, IDOrgstructureColumn}
		mutableColumns                     = postgres.ColumnList{NameColumn, WorkspaceIDColumn, CompanyStatusIDColumn, CustomerStatusIDColumn, OrganizationSizeCategoriesIDColumn, BoldBiSiteNameColumn, DetailsColumn, ImportLockColumn, CreatedByColumn, UpdatedByColumn, CreatedAtColumn, UpdatedAtColumn, LogoIDColumn, IDOrgstructureColumn}
	)

	return entityTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                           IDColumn,
		Name:                         NameColumn,
		WorkspaceID:                  WorkspaceIDColumn,
		CompanyStatusID:              CompanyStatusIDColumn,
		CustomerStatusID:             CustomerStatusIDColumn,
		OrganizationSizeCategoriesID: OrganizationSizeCategoriesIDColumn,
		BoldBiSiteName:               BoldBiSiteNameColumn,
		Details:                      DetailsColumn,
		ImportLock:                   ImportLockColumn,
		CreatedBy:                    CreatedByColumn,
		UpdatedBy:                    UpdatedByColumn,
		CreatedAt:                    CreatedAtColumn,
		UpdatedAt:                    UpdatedAtColumn,
		LogoID:                       LogoIDColumn,
		IDOrgstructure:               IDOrgstructureColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
