//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AccountRole = newAccountRoleTable("public", "account_role", "")

type accountRoleTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	AccessLevelID postgres.ColumnInteger
	RealID        postgres.ColumnInteger
	RoleID        postgres.ColumnInteger
	RegionID      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountRoleTable struct {
	accountRoleTable

	EXCLUDED accountRoleTable
}

// AS creates new AccountRoleTable with assigned alias
func (a AccountRoleTable) AS(alias string) *AccountRoleTable {
	return newAccountRoleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountRoleTable with assigned schema name
func (a AccountRoleTable) FromSchema(schemaName string) *AccountRoleTable {
	return newAccountRoleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountRoleTable with assigned table prefix
func (a AccountRoleTable) WithPrefix(prefix string) *AccountRoleTable {
	return newAccountRoleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountRoleTable with assigned table suffix
func (a AccountRoleTable) WithSuffix(suffix string) *AccountRoleTable {
	return newAccountRoleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountRoleTable(schemaName, tableName, alias string) *AccountRoleTable {
	return &AccountRoleTable{
		accountRoleTable: newAccountRoleTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAccountRoleTableImpl("", "excluded", ""),
	}
}

func newAccountRoleTableImpl(schemaName, tableName, alias string) accountRoleTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		AccessLevelIDColumn = postgres.IntegerColumn("access_level_id")
		RealIDColumn        = postgres.IntegerColumn("real_id")
		RoleIDColumn        = postgres.IntegerColumn("role_id")
		RegionIDColumn      = postgres.IntegerColumn("region_id")
		allColumns          = postgres.ColumnList{IDColumn, AccessLevelIDColumn, RealIDColumn, RoleIDColumn, RegionIDColumn}
		mutableColumns      = postgres.ColumnList{AccessLevelIDColumn, RealIDColumn, RoleIDColumn, RegionIDColumn}
	)

	return accountRoleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		AccessLevelID: AccessLevelIDColumn,
		RealID:        RealIDColumn,
		RoleID:        RoleIDColumn,
		RegionID:      RegionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
