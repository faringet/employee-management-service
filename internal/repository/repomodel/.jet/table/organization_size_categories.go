//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationSizeCategories = newOrganizationSizeCategoriesTable("public", "organization_size_categories", "")

type organizationSizeCategoriesTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	Name              postgres.ColumnString
	Code              postgres.ColumnString
	Description       postgres.ColumnString
	NumberOfEmployees postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp
	CreatedBy         postgres.ColumnInteger
	UpdatedBy         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationSizeCategoriesTable struct {
	organizationSizeCategoriesTable

	EXCLUDED organizationSizeCategoriesTable
}

// AS creates new OrganizationSizeCategoriesTable with assigned alias
func (a OrganizationSizeCategoriesTable) AS(alias string) *OrganizationSizeCategoriesTable {
	return newOrganizationSizeCategoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationSizeCategoriesTable with assigned schema name
func (a OrganizationSizeCategoriesTable) FromSchema(schemaName string) *OrganizationSizeCategoriesTable {
	return newOrganizationSizeCategoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationSizeCategoriesTable with assigned table prefix
func (a OrganizationSizeCategoriesTable) WithPrefix(prefix string) *OrganizationSizeCategoriesTable {
	return newOrganizationSizeCategoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationSizeCategoriesTable with assigned table suffix
func (a OrganizationSizeCategoriesTable) WithSuffix(suffix string) *OrganizationSizeCategoriesTable {
	return newOrganizationSizeCategoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationSizeCategoriesTable(schemaName, tableName, alias string) *OrganizationSizeCategoriesTable {
	return &OrganizationSizeCategoriesTable{
		organizationSizeCategoriesTable: newOrganizationSizeCategoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                        newOrganizationSizeCategoriesTableImpl("", "excluded", ""),
	}
}

func newOrganizationSizeCategoriesTableImpl(schemaName, tableName, alias string) organizationSizeCategoriesTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		NameColumn              = postgres.StringColumn("name")
		CodeColumn              = postgres.StringColumn("code")
		DescriptionColumn       = postgres.StringColumn("description")
		NumberOfEmployeesColumn = postgres.IntegerColumn("number_of_employees")
		CreatedAtColumn         = postgres.TimestampColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampColumn("updated_at")
		CreatedByColumn         = postgres.IntegerColumn("created_by")
		UpdatedByColumn         = postgres.IntegerColumn("updated_by")
		allColumns              = postgres.ColumnList{IDColumn, NameColumn, CodeColumn, DescriptionColumn, NumberOfEmployeesColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
		mutableColumns          = postgres.ColumnList{NameColumn, CodeColumn, DescriptionColumn, NumberOfEmployeesColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
	)

	return organizationSizeCategoriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Name:              NameColumn,
		Code:              CodeColumn,
		Description:       DescriptionColumn,
		NumberOfEmployees: NumberOfEmployeesColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		CreatedBy:         CreatedByColumn,
		UpdatedBy:         UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
