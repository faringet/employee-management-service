//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmEmailTemplate = newSmEmailTemplateTable("public", "sm_email_template", "")

type smEmailTemplateTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	UpdatedAt  postgres.ColumnTimestamp
	CreatedBy  postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestamp
	UpdatedBy  postgres.ColumnInteger
	Email      postgres.ColumnString
	IDLanguage postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmEmailTemplateTable struct {
	smEmailTemplateTable

	EXCLUDED smEmailTemplateTable
}

// AS creates new SmEmailTemplateTable with assigned alias
func (a SmEmailTemplateTable) AS(alias string) *SmEmailTemplateTable {
	return newSmEmailTemplateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmEmailTemplateTable with assigned schema name
func (a SmEmailTemplateTable) FromSchema(schemaName string) *SmEmailTemplateTable {
	return newSmEmailTemplateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmEmailTemplateTable with assigned table prefix
func (a SmEmailTemplateTable) WithPrefix(prefix string) *SmEmailTemplateTable {
	return newSmEmailTemplateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmEmailTemplateTable with assigned table suffix
func (a SmEmailTemplateTable) WithSuffix(suffix string) *SmEmailTemplateTable {
	return newSmEmailTemplateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmEmailTemplateTable(schemaName, tableName, alias string) *SmEmailTemplateTable {
	return &SmEmailTemplateTable{
		smEmailTemplateTable: newSmEmailTemplateTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newSmEmailTemplateTableImpl("", "excluded", ""),
	}
}

func newSmEmailTemplateTableImpl(schemaName, tableName, alias string) smEmailTemplateTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		CreatedByColumn  = postgres.IntegerColumn("created_by")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedByColumn  = postgres.IntegerColumn("updated_by")
		EmailColumn      = postgres.StringColumn("email")
		IDLanguageColumn = postgres.IntegerColumn("id_language")
		allColumns       = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedByColumn, CreatedAtColumn, UpdatedByColumn, EmailColumn, IDLanguageColumn}
		mutableColumns   = postgres.ColumnList{UpdatedAtColumn, CreatedByColumn, CreatedAtColumn, UpdatedByColumn, EmailColumn, IDLanguageColumn}
	)

	return smEmailTemplateTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UpdatedAt:  UpdatedAtColumn,
		CreatedBy:  CreatedByColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedBy:  UpdatedByColumn,
		Email:      EmailColumn,
		IDLanguage: IDLanguageColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
