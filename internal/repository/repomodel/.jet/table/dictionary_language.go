//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DictionaryLanguage = newDictionaryLanguageTable("public", "dictionary_language", "")

type dictionaryLanguageTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	Name            postgres.ColumnString
	Code            postgres.ColumnString
	Description     postgres.ColumnString
	UpdatedAt       postgres.ColumnTimestamp
	CreatedAt       postgres.ColumnTimestamp
	UpdatedBy       postgres.ColumnInteger
	CreatedBy       postgres.ColumnInteger
	QueueNumber     postgres.ColumnInteger
	IconColor       postgres.ColumnString
	IdCustomSvgIcon postgres.ColumnInteger
	IsDefault       postgres.ColumnBool
	Iso             postgres.ColumnString
	Active          postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DictionaryLanguageTable struct {
	dictionaryLanguageTable

	EXCLUDED dictionaryLanguageTable
}

// AS creates new DictionaryLanguageTable with assigned alias
func (a DictionaryLanguageTable) AS(alias string) *DictionaryLanguageTable {
	return newDictionaryLanguageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DictionaryLanguageTable with assigned schema name
func (a DictionaryLanguageTable) FromSchema(schemaName string) *DictionaryLanguageTable {
	return newDictionaryLanguageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DictionaryLanguageTable with assigned table prefix
func (a DictionaryLanguageTable) WithPrefix(prefix string) *DictionaryLanguageTable {
	return newDictionaryLanguageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DictionaryLanguageTable with assigned table suffix
func (a DictionaryLanguageTable) WithSuffix(suffix string) *DictionaryLanguageTable {
	return newDictionaryLanguageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDictionaryLanguageTable(schemaName, tableName, alias string) *DictionaryLanguageTable {
	return &DictionaryLanguageTable{
		dictionaryLanguageTable: newDictionaryLanguageTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newDictionaryLanguageTableImpl("", "excluded", ""),
	}
}

func newDictionaryLanguageTableImpl(schemaName, tableName, alias string) dictionaryLanguageTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		NameColumn            = postgres.StringColumn("name")
		CodeColumn            = postgres.StringColumn("code")
		DescriptionColumn     = postgres.StringColumn("description")
		UpdatedAtColumn       = postgres.TimestampColumn("updated_at")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		UpdatedByColumn       = postgres.IntegerColumn("updated_by")
		CreatedByColumn       = postgres.IntegerColumn("created_by")
		QueueNumberColumn     = postgres.IntegerColumn("queueNumber")
		IconColorColumn       = postgres.StringColumn("iconColor")
		IdCustomSvgIconColumn = postgres.IntegerColumn("idCustomSvgIcon")
		IsDefaultColumn       = postgres.BoolColumn("is_default")
		IsoColumn             = postgres.StringColumn("iso")
		ActiveColumn          = postgres.BoolColumn("active")
		allColumns            = postgres.ColumnList{IDColumn, NameColumn, CodeColumn, DescriptionColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, QueueNumberColumn, IconColorColumn, IdCustomSvgIconColumn, IsDefaultColumn, IsoColumn, ActiveColumn}
		mutableColumns        = postgres.ColumnList{NameColumn, CodeColumn, DescriptionColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, QueueNumberColumn, IconColorColumn, IdCustomSvgIconColumn, IsDefaultColumn, IsoColumn, ActiveColumn}
	)

	return dictionaryLanguageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Name:            NameColumn,
		Code:            CodeColumn,
		Description:     DescriptionColumn,
		UpdatedAt:       UpdatedAtColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedBy:       UpdatedByColumn,
		CreatedBy:       CreatedByColumn,
		QueueNumber:     QueueNumberColumn,
		IconColor:       IconColorColumn,
		IdCustomSvgIcon: IdCustomSvgIconColumn,
		IsDefault:       IsDefaultColumn,
		Iso:             IsoColumn,
		Active:          ActiveColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
