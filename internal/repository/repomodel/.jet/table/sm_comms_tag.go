//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmCommsTag = newSmCommsTagTable("public", "sm_comms_tag", "")

type smCommsTagTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UpdatedAt postgres.ColumnTimestamp
	CreatedAt postgres.ColumnTimestamp
	UpdatedBy postgres.ColumnInteger
	CreatedBy postgres.ColumnInteger
	TagID     postgres.ColumnInteger
	SurveyID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmCommsTagTable struct {
	smCommsTagTable

	EXCLUDED smCommsTagTable
}

// AS creates new SmCommsTagTable with assigned alias
func (a SmCommsTagTable) AS(alias string) *SmCommsTagTable {
	return newSmCommsTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmCommsTagTable with assigned schema name
func (a SmCommsTagTable) FromSchema(schemaName string) *SmCommsTagTable {
	return newSmCommsTagTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmCommsTagTable with assigned table prefix
func (a SmCommsTagTable) WithPrefix(prefix string) *SmCommsTagTable {
	return newSmCommsTagTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmCommsTagTable with assigned table suffix
func (a SmCommsTagTable) WithSuffix(suffix string) *SmCommsTagTable {
	return newSmCommsTagTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmCommsTagTable(schemaName, tableName, alias string) *SmCommsTagTable {
	return &SmCommsTagTable{
		smCommsTagTable: newSmCommsTagTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newSmCommsTagTableImpl("", "excluded", ""),
	}
}

func newSmCommsTagTableImpl(schemaName, tableName, alias string) smCommsTagTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedByColumn = postgres.IntegerColumn("updated_by")
		CreatedByColumn = postgres.IntegerColumn("created_by")
		TagIDColumn     = postgres.IntegerColumn("tag_id")
		SurveyIDColumn  = postgres.IntegerColumn("survey_id")
		allColumns      = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, TagIDColumn, SurveyIDColumn}
		mutableColumns  = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, TagIDColumn, SurveyIDColumn}
	)

	return smCommsTagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UpdatedAt: UpdatedAtColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedBy: UpdatedByColumn,
		CreatedBy: CreatedByColumn,
		TagID:     TagIDColumn,
		SurveyID:  SurveyIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
