//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Industries = newIndustriesTable("public", "industries", "")

type industriesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	Code        postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp
	CreatedBy   postgres.ColumnInteger
	UpdatedBy   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IndustriesTable struct {
	industriesTable

	EXCLUDED industriesTable
}

// AS creates new IndustriesTable with assigned alias
func (a IndustriesTable) AS(alias string) *IndustriesTable {
	return newIndustriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IndustriesTable with assigned schema name
func (a IndustriesTable) FromSchema(schemaName string) *IndustriesTable {
	return newIndustriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IndustriesTable with assigned table prefix
func (a IndustriesTable) WithPrefix(prefix string) *IndustriesTable {
	return newIndustriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IndustriesTable with assigned table suffix
func (a IndustriesTable) WithSuffix(suffix string) *IndustriesTable {
	return newIndustriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIndustriesTable(schemaName, tableName, alias string) *IndustriesTable {
	return &IndustriesTable{
		industriesTable: newIndustriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newIndustriesTableImpl("", "excluded", ""),
	}
}

func newIndustriesTableImpl(schemaName, tableName, alias string) industriesTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		CodeColumn        = postgres.StringColumn("code")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		UpdatedByColumn   = postgres.IntegerColumn("updated_by")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, CodeColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, CodeColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
	)

	return industriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Code:        CodeColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		CreatedBy:   CreatedByColumn,
		UpdatedBy:   UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
