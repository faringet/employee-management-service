//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Accounts = newAccountsTable("public", "accounts", "")

type accountsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	Email         postgres.ColumnString
	CreatedAt     postgres.ColumnTimestamp
	UpdatedAt     postgres.ColumnTimestamp
	FullName      postgres.ColumnString
	PreferredName postgres.ColumnString
	CreatedBy     postgres.ColumnInteger
	UpdatedBy     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountsTable struct {
	accountsTable

	EXCLUDED accountsTable
}

// AS creates new AccountsTable with assigned alias
func (a AccountsTable) AS(alias string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountsTable with assigned schema name
func (a AccountsTable) FromSchema(schemaName string) *AccountsTable {
	return newAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountsTable with assigned table prefix
func (a AccountsTable) WithPrefix(prefix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountsTable with assigned table suffix
func (a AccountsTable) WithSuffix(suffix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountsTable(schemaName, tableName, alias string) *AccountsTable {
	return &AccountsTable{
		accountsTable: newAccountsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newAccountsTableImpl("", "excluded", ""),
	}
}

func newAccountsTableImpl(schemaName, tableName, alias string) accountsTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		EmailColumn         = postgres.StringColumn("email")
		CreatedAtColumn     = postgres.TimestampColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampColumn("updated_at")
		FullNameColumn      = postgres.StringColumn("full_name")
		PreferredNameColumn = postgres.StringColumn("preferred_name")
		CreatedByColumn     = postgres.IntegerColumn("created_by")
		UpdatedByColumn     = postgres.IntegerColumn("updated_by")
		allColumns          = postgres.ColumnList{IDColumn, EmailColumn, CreatedAtColumn, UpdatedAtColumn, FullNameColumn, PreferredNameColumn, CreatedByColumn, UpdatedByColumn}
		mutableColumns      = postgres.ColumnList{EmailColumn, CreatedAtColumn, UpdatedAtColumn, FullNameColumn, PreferredNameColumn, CreatedByColumn, UpdatedByColumn}
	)

	return accountsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Email:         EmailColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		FullName:      FullNameColumn,
		PreferredName: PreferredNameColumn,
		CreatedBy:     CreatedByColumn,
		UpdatedBy:     UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
