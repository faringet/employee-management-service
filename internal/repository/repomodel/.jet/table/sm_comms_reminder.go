//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmCommsReminder = newSmCommsReminderTable("public", "sm_comms_reminder", "")

type smCommsReminderTable struct {
	postgres.Table

	// Columns
	ID                        postgres.ColumnInteger
	UpdatedAt                 postgres.ColumnTimestamp
	CreatedAt                 postgres.ColumnTimestamp
	UpdatedBy                 postgres.ColumnInteger
	CreatedBy                 postgres.ColumnInteger
	TimeSendReminder          postgres.ColumnTimestamp
	ReminderDaysID            postgres.ColumnInteger
	ReminderRecipientsgroupID postgres.ColumnInteger
	SurveyID                  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmCommsReminderTable struct {
	smCommsReminderTable

	EXCLUDED smCommsReminderTable
}

// AS creates new SmCommsReminderTable with assigned alias
func (a SmCommsReminderTable) AS(alias string) *SmCommsReminderTable {
	return newSmCommsReminderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmCommsReminderTable with assigned schema name
func (a SmCommsReminderTable) FromSchema(schemaName string) *SmCommsReminderTable {
	return newSmCommsReminderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmCommsReminderTable with assigned table prefix
func (a SmCommsReminderTable) WithPrefix(prefix string) *SmCommsReminderTable {
	return newSmCommsReminderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmCommsReminderTable with assigned table suffix
func (a SmCommsReminderTable) WithSuffix(suffix string) *SmCommsReminderTable {
	return newSmCommsReminderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmCommsReminderTable(schemaName, tableName, alias string) *SmCommsReminderTable {
	return &SmCommsReminderTable{
		smCommsReminderTable: newSmCommsReminderTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newSmCommsReminderTableImpl("", "excluded", ""),
	}
}

func newSmCommsReminderTableImpl(schemaName, tableName, alias string) smCommsReminderTable {
	var (
		IDColumn                        = postgres.IntegerColumn("id")
		UpdatedAtColumn                 = postgres.TimestampColumn("updated_at")
		CreatedAtColumn                 = postgres.TimestampColumn("created_at")
		UpdatedByColumn                 = postgres.IntegerColumn("updated_by")
		CreatedByColumn                 = postgres.IntegerColumn("created_by")
		TimeSendReminderColumn          = postgres.TimestampColumn("time_send_reminder")
		ReminderDaysIDColumn            = postgres.IntegerColumn("reminder_days_id")
		ReminderRecipientsgroupIDColumn = postgres.IntegerColumn("reminder_recipientsgroup_id")
		SurveyIDColumn                  = postgres.IntegerColumn("survey_id")
		allColumns                      = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, TimeSendReminderColumn, ReminderDaysIDColumn, ReminderRecipientsgroupIDColumn, SurveyIDColumn}
		mutableColumns                  = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, TimeSendReminderColumn, ReminderDaysIDColumn, ReminderRecipientsgroupIDColumn, SurveyIDColumn}
	)

	return smCommsReminderTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		UpdatedAt:                 UpdatedAtColumn,
		CreatedAt:                 CreatedAtColumn,
		UpdatedBy:                 UpdatedByColumn,
		CreatedBy:                 CreatedByColumn,
		TimeSendReminder:          TimeSendReminderColumn,
		ReminderDaysID:            ReminderDaysIDColumn,
		ReminderRecipientsgroupID: ReminderRecipientsgroupIDColumn,
		SurveyID:                  SurveyIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
