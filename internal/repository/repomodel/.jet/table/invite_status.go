//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var InviteStatus = newInviteStatusTable("public", "invite_status", "")

type inviteStatusTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	Code        postgres.ColumnString
	Description postgres.ColumnString
	UpdatedAt   postgres.ColumnTimestamp
	CreatedAt   postgres.ColumnTimestamp
	UpdatedBy   postgres.ColumnInteger
	CreatedBy   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InviteStatusTable struct {
	inviteStatusTable

	EXCLUDED inviteStatusTable
}

// AS creates new InviteStatusTable with assigned alias
func (a InviteStatusTable) AS(alias string) *InviteStatusTable {
	return newInviteStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InviteStatusTable with assigned schema name
func (a InviteStatusTable) FromSchema(schemaName string) *InviteStatusTable {
	return newInviteStatusTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InviteStatusTable with assigned table prefix
func (a InviteStatusTable) WithPrefix(prefix string) *InviteStatusTable {
	return newInviteStatusTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InviteStatusTable with assigned table suffix
func (a InviteStatusTable) WithSuffix(suffix string) *InviteStatusTable {
	return newInviteStatusTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInviteStatusTable(schemaName, tableName, alias string) *InviteStatusTable {
	return &InviteStatusTable{
		inviteStatusTable: newInviteStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newInviteStatusTableImpl("", "excluded", ""),
	}
}

func newInviteStatusTableImpl(schemaName, tableName, alias string) inviteStatusTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		CodeColumn        = postgres.StringColumn("code")
		DescriptionColumn = postgres.StringColumn("description")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedByColumn   = postgres.IntegerColumn("updated_by")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, CodeColumn, DescriptionColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, CodeColumn, DescriptionColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn}
	)

	return inviteStatusTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Code:        CodeColumn,
		Description: DescriptionColumn,
		UpdatedAt:   UpdatedAtColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedBy:   UpdatedByColumn,
		CreatedBy:   CreatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
