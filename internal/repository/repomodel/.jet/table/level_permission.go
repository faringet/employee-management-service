//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LevelPermission = newLevelPermissionTable("public", "level_permission", "")

type levelPermissionTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	PermissionID  postgres.ColumnInteger
	AccessLevelID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LevelPermissionTable struct {
	levelPermissionTable

	EXCLUDED levelPermissionTable
}

// AS creates new LevelPermissionTable with assigned alias
func (a LevelPermissionTable) AS(alias string) *LevelPermissionTable {
	return newLevelPermissionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LevelPermissionTable with assigned schema name
func (a LevelPermissionTable) FromSchema(schemaName string) *LevelPermissionTable {
	return newLevelPermissionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LevelPermissionTable with assigned table prefix
func (a LevelPermissionTable) WithPrefix(prefix string) *LevelPermissionTable {
	return newLevelPermissionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LevelPermissionTable with assigned table suffix
func (a LevelPermissionTable) WithSuffix(suffix string) *LevelPermissionTable {
	return newLevelPermissionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLevelPermissionTable(schemaName, tableName, alias string) *LevelPermissionTable {
	return &LevelPermissionTable{
		levelPermissionTable: newLevelPermissionTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newLevelPermissionTableImpl("", "excluded", ""),
	}
}

func newLevelPermissionTableImpl(schemaName, tableName, alias string) levelPermissionTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		PermissionIDColumn  = postgres.IntegerColumn("permission_id")
		AccessLevelIDColumn = postgres.IntegerColumn("access_level_id")
		allColumns          = postgres.ColumnList{IDColumn, PermissionIDColumn, AccessLevelIDColumn}
		mutableColumns      = postgres.ColumnList{PermissionIDColumn, AccessLevelIDColumn}
	)

	return levelPermissionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		PermissionID:  PermissionIDColumn,
		AccessLevelID: AccessLevelIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
