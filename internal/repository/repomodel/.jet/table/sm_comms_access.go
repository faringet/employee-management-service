//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmCommsAccess = newSmCommsAccessTable("public", "sm_comms_access", "")

type smCommsAccessTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnInteger
	UpdatedAt          postgres.ColumnTimestamp
	CreatedAt          postgres.ColumnTimestamp
	UpdatedBy          postgres.ColumnInteger
	CreatedBy          postgres.ColumnInteger
	TypeAccessSurveyID postgres.ColumnInteger
	SurveyID           postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmCommsAccessTable struct {
	smCommsAccessTable

	EXCLUDED smCommsAccessTable
}

// AS creates new SmCommsAccessTable with assigned alias
func (a SmCommsAccessTable) AS(alias string) *SmCommsAccessTable {
	return newSmCommsAccessTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmCommsAccessTable with assigned schema name
func (a SmCommsAccessTable) FromSchema(schemaName string) *SmCommsAccessTable {
	return newSmCommsAccessTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmCommsAccessTable with assigned table prefix
func (a SmCommsAccessTable) WithPrefix(prefix string) *SmCommsAccessTable {
	return newSmCommsAccessTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmCommsAccessTable with assigned table suffix
func (a SmCommsAccessTable) WithSuffix(suffix string) *SmCommsAccessTable {
	return newSmCommsAccessTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmCommsAccessTable(schemaName, tableName, alias string) *SmCommsAccessTable {
	return &SmCommsAccessTable{
		smCommsAccessTable: newSmCommsAccessTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newSmCommsAccessTableImpl("", "excluded", ""),
	}
}

func newSmCommsAccessTableImpl(schemaName, tableName, alias string) smCommsAccessTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		UpdatedAtColumn          = postgres.TimestampColumn("updated_at")
		CreatedAtColumn          = postgres.TimestampColumn("created_at")
		UpdatedByColumn          = postgres.IntegerColumn("updated_by")
		CreatedByColumn          = postgres.IntegerColumn("created_by")
		TypeAccessSurveyIDColumn = postgres.IntegerColumn("type_access_survey_id")
		SurveyIDColumn           = postgres.IntegerColumn("survey_id")
		allColumns               = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, TypeAccessSurveyIDColumn, SurveyIDColumn}
		mutableColumns           = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, TypeAccessSurveyIDColumn, SurveyIDColumn}
	)

	return smCommsAccessTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		UpdatedAt:          UpdatedAtColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedBy:          UpdatedByColumn,
		CreatedBy:          CreatedByColumn,
		TypeAccessSurveyID: TypeAccessSurveyIDColumn,
		SurveyID:           SurveyIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
