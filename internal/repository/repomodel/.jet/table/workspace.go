//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Workspace = newWorkspaceTable("public", "workspace", "")

type workspaceTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	Name           postgres.ColumnString
	ProjM          postgres.ColumnBool
	Industry       postgres.ColumnString
	SignInMethod   postgres.ColumnInteger
	Demo           postgres.ColumnBool
	UpdatedAt      postgres.ColumnTimestamp
	UpdatedBy      postgres.ColumnInteger
	CreatedBy      postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestamp
	CompanyLogoID  postgres.ColumnInteger
	CompanyLogoURL postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkspaceTable struct {
	workspaceTable

	EXCLUDED workspaceTable
}

// AS creates new WorkspaceTable with assigned alias
func (a WorkspaceTable) AS(alias string) *WorkspaceTable {
	return newWorkspaceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkspaceTable with assigned schema name
func (a WorkspaceTable) FromSchema(schemaName string) *WorkspaceTable {
	return newWorkspaceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkspaceTable with assigned table prefix
func (a WorkspaceTable) WithPrefix(prefix string) *WorkspaceTable {
	return newWorkspaceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkspaceTable with assigned table suffix
func (a WorkspaceTable) WithSuffix(suffix string) *WorkspaceTable {
	return newWorkspaceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkspaceTable(schemaName, tableName, alias string) *WorkspaceTable {
	return &WorkspaceTable{
		workspaceTable: newWorkspaceTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newWorkspaceTableImpl("", "excluded", ""),
	}
}

func newWorkspaceTableImpl(schemaName, tableName, alias string) workspaceTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		NameColumn           = postgres.StringColumn("name")
		ProjMColumn          = postgres.BoolColumn("proj_m")
		IndustryColumn       = postgres.StringColumn("industry")
		SignInMethodColumn   = postgres.IntegerColumn("sign_in_method")
		DemoColumn           = postgres.BoolColumn("demo")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		UpdatedByColumn      = postgres.IntegerColumn("updated_by")
		CreatedByColumn      = postgres.IntegerColumn("created_by")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		CompanyLogoIDColumn  = postgres.IntegerColumn("company_logo_id")
		CompanyLogoURLColumn = postgres.StringColumn("company_logo_url")
		allColumns           = postgres.ColumnList{IDColumn, NameColumn, ProjMColumn, IndustryColumn, SignInMethodColumn, DemoColumn, UpdatedAtColumn, UpdatedByColumn, CreatedByColumn, CreatedAtColumn, CompanyLogoIDColumn, CompanyLogoURLColumn}
		mutableColumns       = postgres.ColumnList{NameColumn, ProjMColumn, IndustryColumn, SignInMethodColumn, DemoColumn, UpdatedAtColumn, UpdatedByColumn, CreatedByColumn, CreatedAtColumn, CompanyLogoIDColumn, CompanyLogoURLColumn}
	)

	return workspaceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Name:           NameColumn,
		ProjM:          ProjMColumn,
		Industry:       IndustryColumn,
		SignInMethod:   SignInMethodColumn,
		Demo:           DemoColumn,
		UpdatedAt:      UpdatedAtColumn,
		UpdatedBy:      UpdatedByColumn,
		CreatedBy:      CreatedByColumn,
		CreatedAt:      CreatedAtColumn,
		CompanyLogoID:  CompanyLogoIDColumn,
		CompanyLogoURL: CompanyLogoURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
