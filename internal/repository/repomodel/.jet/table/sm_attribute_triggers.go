//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SmAttributeTriggers = newSmAttributeTriggersTable("public", "sm_attribute_triggers", "")

type smAttributeTriggersTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	ProjectID   postgres.ColumnInteger
	AttributeID postgres.ColumnInteger
	Value       postgres.ColumnString
	UpdatedAt   postgres.ColumnTimestamp
	CreatedAt   postgres.ColumnTimestamp
	UpdatedBy   postgres.ColumnInteger
	CreatedBy   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SmAttributeTriggersTable struct {
	smAttributeTriggersTable

	EXCLUDED smAttributeTriggersTable
}

// AS creates new SmAttributeTriggersTable with assigned alias
func (a SmAttributeTriggersTable) AS(alias string) *SmAttributeTriggersTable {
	return newSmAttributeTriggersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SmAttributeTriggersTable with assigned schema name
func (a SmAttributeTriggersTable) FromSchema(schemaName string) *SmAttributeTriggersTable {
	return newSmAttributeTriggersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SmAttributeTriggersTable with assigned table prefix
func (a SmAttributeTriggersTable) WithPrefix(prefix string) *SmAttributeTriggersTable {
	return newSmAttributeTriggersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SmAttributeTriggersTable with assigned table suffix
func (a SmAttributeTriggersTable) WithSuffix(suffix string) *SmAttributeTriggersTable {
	return newSmAttributeTriggersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSmAttributeTriggersTable(schemaName, tableName, alias string) *SmAttributeTriggersTable {
	return &SmAttributeTriggersTable{
		smAttributeTriggersTable: newSmAttributeTriggersTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newSmAttributeTriggersTableImpl("", "excluded", ""),
	}
}

func newSmAttributeTriggersTableImpl(schemaName, tableName, alias string) smAttributeTriggersTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		ProjectIDColumn   = postgres.IntegerColumn("project_id")
		AttributeIDColumn = postgres.IntegerColumn("attribute_id")
		ValueColumn       = postgres.StringColumn("value")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedByColumn   = postgres.IntegerColumn("updated_by")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		allColumns        = postgres.ColumnList{IDColumn, ProjectIDColumn, AttributeIDColumn, ValueColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn}
		mutableColumns    = postgres.ColumnList{ProjectIDColumn, AttributeIDColumn, ValueColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn}
	)

	return smAttributeTriggersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ProjectID:   ProjectIDColumn,
		AttributeID: AttributeIDColumn,
		Value:       ValueColumn,
		UpdatedAt:   UpdatedAtColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedBy:   UpdatedByColumn,
		CreatedBy:   CreatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
