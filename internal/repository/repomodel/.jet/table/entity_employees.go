//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EntityEmployees = newEntityEmployeesTable("public", "entity_employees", "")

type entityEmployeesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	ManagerID  postgres.ColumnInteger
	EmployeeID postgres.ColumnInteger
	EntityID   postgres.ColumnInteger
	UpdatedAt  postgres.ColumnTimestamp
	CreatedAt  postgres.ColumnTimestamp
	UpdatedBy  postgres.ColumnInteger
	CreatedBy  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EntityEmployeesTable struct {
	entityEmployeesTable

	EXCLUDED entityEmployeesTable
}

// AS creates new EntityEmployeesTable with assigned alias
func (a EntityEmployeesTable) AS(alias string) *EntityEmployeesTable {
	return newEntityEmployeesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EntityEmployeesTable with assigned schema name
func (a EntityEmployeesTable) FromSchema(schemaName string) *EntityEmployeesTable {
	return newEntityEmployeesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EntityEmployeesTable with assigned table prefix
func (a EntityEmployeesTable) WithPrefix(prefix string) *EntityEmployeesTable {
	return newEntityEmployeesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EntityEmployeesTable with assigned table suffix
func (a EntityEmployeesTable) WithSuffix(suffix string) *EntityEmployeesTable {
	return newEntityEmployeesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEntityEmployeesTable(schemaName, tableName, alias string) *EntityEmployeesTable {
	return &EntityEmployeesTable{
		entityEmployeesTable: newEntityEmployeesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newEntityEmployeesTableImpl("", "excluded", ""),
	}
}

func newEntityEmployeesTableImpl(schemaName, tableName, alias string) entityEmployeesTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		ManagerIDColumn  = postgres.IntegerColumn("manager_id")
		EmployeeIDColumn = postgres.IntegerColumn("employee_id")
		EntityIDColumn   = postgres.IntegerColumn("entity_id")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedByColumn  = postgres.IntegerColumn("updated_by")
		CreatedByColumn  = postgres.IntegerColumn("created_by")
		allColumns       = postgres.ColumnList{IDColumn, ManagerIDColumn, EmployeeIDColumn, EntityIDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn}
		mutableColumns   = postgres.ColumnList{ManagerIDColumn, EmployeeIDColumn, EntityIDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn}
	)

	return entityEmployeesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		ManagerID:  ManagerIDColumn,
		EmployeeID: EmployeeIDColumn,
		EntityID:   EntityIDColumn,
		UpdatedAt:  UpdatedAtColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedBy:  UpdatedByColumn,
		CreatedBy:  CreatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
