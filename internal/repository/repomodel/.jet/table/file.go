//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var File = newFileTable("public", "file", "")

type fileTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnInteger
	Name postgres.ColumnString
	Path postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FileTable struct {
	fileTable

	EXCLUDED fileTable
}

// AS creates new FileTable with assigned alias
func (a FileTable) AS(alias string) *FileTable {
	return newFileTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FileTable with assigned schema name
func (a FileTable) FromSchema(schemaName string) *FileTable {
	return newFileTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FileTable with assigned table prefix
func (a FileTable) WithPrefix(prefix string) *FileTable {
	return newFileTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FileTable with assigned table suffix
func (a FileTable) WithSuffix(suffix string) *FileTable {
	return newFileTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFileTable(schemaName, tableName, alias string) *FileTable {
	return &FileTable{
		fileTable: newFileTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newFileTableImpl("", "excluded", ""),
	}
}

func newFileTableImpl(schemaName, tableName, alias string) fileTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		PathColumn     = postgres.StringColumn("path")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, PathColumn}
		mutableColumns = postgres.ColumnList{NameColumn, PathColumn}
	)

	return fileTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,
		Path: PathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
