//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Attributes = newAttributesTable("public", "attributes", "")

type attributesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Name      postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp
	CreatedBy postgres.ColumnInteger
	UpdatedBy postgres.ColumnInteger
	IsDate    postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AttributesTable struct {
	attributesTable

	EXCLUDED attributesTable
}

// AS creates new AttributesTable with assigned alias
func (a AttributesTable) AS(alias string) *AttributesTable {
	return newAttributesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AttributesTable with assigned schema name
func (a AttributesTable) FromSchema(schemaName string) *AttributesTable {
	return newAttributesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AttributesTable with assigned table prefix
func (a AttributesTable) WithPrefix(prefix string) *AttributesTable {
	return newAttributesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AttributesTable with assigned table suffix
func (a AttributesTable) WithSuffix(suffix string) *AttributesTable {
	return newAttributesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAttributesTable(schemaName, tableName, alias string) *AttributesTable {
	return &AttributesTable{
		attributesTable: newAttributesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newAttributesTableImpl("", "excluded", ""),
	}
}

func newAttributesTableImpl(schemaName, tableName, alias string) attributesTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		NameColumn      = postgres.StringColumn("name")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		CreatedByColumn = postgres.IntegerColumn("created_by")
		UpdatedByColumn = postgres.IntegerColumn("updated_by")
		IsDateColumn    = postgres.BoolColumn("is_date")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn, IsDateColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn, IsDateColumn}
	)

	return attributesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		CreatedBy: CreatedByColumn,
		UpdatedBy: UpdatedByColumn,
		IsDate:    IsDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
