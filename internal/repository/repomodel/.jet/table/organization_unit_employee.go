//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationUnitEmployee = newOrganizationUnitEmployeeTable("public", "organization_unit_employee", "")

type organizationUnitEmployeeTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	UnitID     postgres.ColumnInteger
	EmployeeID postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	CreatedBy  postgres.ColumnInteger
	UpdatedBy  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationUnitEmployeeTable struct {
	organizationUnitEmployeeTable

	EXCLUDED organizationUnitEmployeeTable
}

// AS creates new OrganizationUnitEmployeeTable with assigned alias
func (a OrganizationUnitEmployeeTable) AS(alias string) *OrganizationUnitEmployeeTable {
	return newOrganizationUnitEmployeeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationUnitEmployeeTable with assigned schema name
func (a OrganizationUnitEmployeeTable) FromSchema(schemaName string) *OrganizationUnitEmployeeTable {
	return newOrganizationUnitEmployeeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationUnitEmployeeTable with assigned table prefix
func (a OrganizationUnitEmployeeTable) WithPrefix(prefix string) *OrganizationUnitEmployeeTable {
	return newOrganizationUnitEmployeeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationUnitEmployeeTable with assigned table suffix
func (a OrganizationUnitEmployeeTable) WithSuffix(suffix string) *OrganizationUnitEmployeeTable {
	return newOrganizationUnitEmployeeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationUnitEmployeeTable(schemaName, tableName, alias string) *OrganizationUnitEmployeeTable {
	return &OrganizationUnitEmployeeTable{
		organizationUnitEmployeeTable: newOrganizationUnitEmployeeTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newOrganizationUnitEmployeeTableImpl("", "excluded", ""),
	}
}

func newOrganizationUnitEmployeeTableImpl(schemaName, tableName, alias string) organizationUnitEmployeeTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		UnitIDColumn     = postgres.IntegerColumn("unit_id")
		EmployeeIDColumn = postgres.IntegerColumn("employee_id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		CreatedByColumn  = postgres.IntegerColumn("created_by")
		UpdatedByColumn  = postgres.IntegerColumn("updated_by")
		allColumns       = postgres.ColumnList{IDColumn, UnitIDColumn, EmployeeIDColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
		mutableColumns   = postgres.ColumnList{UnitIDColumn, EmployeeIDColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn}
	)

	return organizationUnitEmployeeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UnitID:     UnitIDColumn,
		EmployeeID: EmployeeIDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		CreatedBy:  CreatedByColumn,
		UpdatedBy:  UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
