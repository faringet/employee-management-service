//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationUnit = newOrganizationUnitTable("public", "organization_unit", "")

type organizationUnitTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	ParentID    postgres.ColumnInteger
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Level       postgres.ColumnInteger
	Details     postgres.ColumnString
	Emails      postgres.ColumnString
	EntityID    postgres.ColumnInteger
	UpdatedAt   postgres.ColumnTimestamp
	CreatedAt   postgres.ColumnTimestamp
	UpdatedBy   postgres.ColumnInteger
	CreatedBy   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationUnitTable struct {
	organizationUnitTable

	EXCLUDED organizationUnitTable
}

// AS creates new OrganizationUnitTable with assigned alias
func (a OrganizationUnitTable) AS(alias string) *OrganizationUnitTable {
	return newOrganizationUnitTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationUnitTable with assigned schema name
func (a OrganizationUnitTable) FromSchema(schemaName string) *OrganizationUnitTable {
	return newOrganizationUnitTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationUnitTable with assigned table prefix
func (a OrganizationUnitTable) WithPrefix(prefix string) *OrganizationUnitTable {
	return newOrganizationUnitTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationUnitTable with assigned table suffix
func (a OrganizationUnitTable) WithSuffix(suffix string) *OrganizationUnitTable {
	return newOrganizationUnitTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationUnitTable(schemaName, tableName, alias string) *OrganizationUnitTable {
	return &OrganizationUnitTable{
		organizationUnitTable: newOrganizationUnitTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newOrganizationUnitTableImpl("", "excluded", ""),
	}
}

func newOrganizationUnitTableImpl(schemaName, tableName, alias string) organizationUnitTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		ParentIDColumn    = postgres.IntegerColumn("parent_id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		LevelColumn       = postgres.IntegerColumn("level")
		DetailsColumn     = postgres.StringColumn("details")
		EmailsColumn      = postgres.StringColumn("emails")
		EntityIDColumn    = postgres.IntegerColumn("entity_id")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedByColumn   = postgres.IntegerColumn("updated_by")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		allColumns        = postgres.ColumnList{IDColumn, ParentIDColumn, NameColumn, DescriptionColumn, LevelColumn, DetailsColumn, EmailsColumn, EntityIDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn}
		mutableColumns    = postgres.ColumnList{ParentIDColumn, NameColumn, DescriptionColumn, LevelColumn, DetailsColumn, EmailsColumn, EntityIDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn}
	)

	return organizationUnitTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ParentID:    ParentIDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Level:       LevelColumn,
		Details:     DetailsColumn,
		Emails:      EmailsColumn,
		EntityID:    EntityIDColumn,
		UpdatedAt:   UpdatedAtColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedBy:   UpdatedByColumn,
		CreatedBy:   CreatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
