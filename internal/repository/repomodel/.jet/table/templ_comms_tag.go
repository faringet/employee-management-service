//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TemplCommsTag = newTemplCommsTagTable("public", "templ_comms_tag", "")

type templCommsTagTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	UpdatedAt     postgres.ColumnTimestamp
	CreatedAt     postgres.ColumnTimestamp
	UpdatedBy     postgres.ColumnInteger
	CreatedBy     postgres.ColumnInteger
	CommsEntityID postgres.ColumnInteger
	TagID         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TemplCommsTagTable struct {
	templCommsTagTable

	EXCLUDED templCommsTagTable
}

// AS creates new TemplCommsTagTable with assigned alias
func (a TemplCommsTagTable) AS(alias string) *TemplCommsTagTable {
	return newTemplCommsTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TemplCommsTagTable with assigned schema name
func (a TemplCommsTagTable) FromSchema(schemaName string) *TemplCommsTagTable {
	return newTemplCommsTagTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TemplCommsTagTable with assigned table prefix
func (a TemplCommsTagTable) WithPrefix(prefix string) *TemplCommsTagTable {
	return newTemplCommsTagTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TemplCommsTagTable with assigned table suffix
func (a TemplCommsTagTable) WithSuffix(suffix string) *TemplCommsTagTable {
	return newTemplCommsTagTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTemplCommsTagTable(schemaName, tableName, alias string) *TemplCommsTagTable {
	return &TemplCommsTagTable{
		templCommsTagTable: newTemplCommsTagTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newTemplCommsTagTableImpl("", "excluded", ""),
	}
}

func newTemplCommsTagTableImpl(schemaName, tableName, alias string) templCommsTagTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		UpdatedAtColumn     = postgres.TimestampColumn("updated_at")
		CreatedAtColumn     = postgres.TimestampColumn("created_at")
		UpdatedByColumn     = postgres.IntegerColumn("updated_by")
		CreatedByColumn     = postgres.IntegerColumn("created_by")
		CommsEntityIDColumn = postgres.IntegerColumn("comms_entity_id")
		TagIDColumn         = postgres.IntegerColumn("tag_id")
		allColumns          = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, CommsEntityIDColumn, TagIDColumn}
		mutableColumns      = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, CommsEntityIDColumn, TagIDColumn}
	)

	return templCommsTagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		UpdatedAt:     UpdatedAtColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedBy:     UpdatedByColumn,
		CreatedBy:     CreatedByColumn,
		CommsEntityID: CommsEntityIDColumn,
		TagID:         TagIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
