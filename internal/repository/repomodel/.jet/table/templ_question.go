//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TemplQuestion = newTemplQuestionTable("public", "templ_question", "")

type templQuestionTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	UpdatedAt           postgres.ColumnTimestamp
	CreatedAt           postgres.ColumnTimestamp
	UpdatedBy           postgres.ColumnInteger
	CreatedBy           postgres.ColumnInteger
	Name                postgres.ColumnString
	Title               postgres.ColumnString
	TemplateID          postgres.ColumnInteger
	TypeQuestionID      postgres.ColumnInteger
	DimensionID         postgres.ColumnInteger
	IsQuestionCondition postgres.ColumnBool
	IsCalculateScore    postgres.ColumnBool
	QuestionJson        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TemplQuestionTable struct {
	templQuestionTable

	EXCLUDED templQuestionTable
}

// AS creates new TemplQuestionTable with assigned alias
func (a TemplQuestionTable) AS(alias string) *TemplQuestionTable {
	return newTemplQuestionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TemplQuestionTable with assigned schema name
func (a TemplQuestionTable) FromSchema(schemaName string) *TemplQuestionTable {
	return newTemplQuestionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TemplQuestionTable with assigned table prefix
func (a TemplQuestionTable) WithPrefix(prefix string) *TemplQuestionTable {
	return newTemplQuestionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TemplQuestionTable with assigned table suffix
func (a TemplQuestionTable) WithSuffix(suffix string) *TemplQuestionTable {
	return newTemplQuestionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTemplQuestionTable(schemaName, tableName, alias string) *TemplQuestionTable {
	return &TemplQuestionTable{
		templQuestionTable: newTemplQuestionTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newTemplQuestionTableImpl("", "excluded", ""),
	}
}

func newTemplQuestionTableImpl(schemaName, tableName, alias string) templQuestionTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		UpdatedAtColumn           = postgres.TimestampColumn("updated_at")
		CreatedAtColumn           = postgres.TimestampColumn("created_at")
		UpdatedByColumn           = postgres.IntegerColumn("updated_by")
		CreatedByColumn           = postgres.IntegerColumn("created_by")
		NameColumn                = postgres.StringColumn("name")
		TitleColumn               = postgres.StringColumn("title")
		TemplateIDColumn          = postgres.IntegerColumn("template_id")
		TypeQuestionIDColumn      = postgres.IntegerColumn("type_question_id")
		DimensionIDColumn         = postgres.IntegerColumn("dimension_id")
		IsQuestionConditionColumn = postgres.BoolColumn("isQuestionCondition")
		IsCalculateScoreColumn    = postgres.BoolColumn("isCalculateScore")
		QuestionJsonColumn        = postgres.StringColumn("questionJson")
		allColumns                = postgres.ColumnList{IDColumn, UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, NameColumn, TitleColumn, TemplateIDColumn, TypeQuestionIDColumn, DimensionIDColumn, IsQuestionConditionColumn, IsCalculateScoreColumn, QuestionJsonColumn}
		mutableColumns            = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn, UpdatedByColumn, CreatedByColumn, NameColumn, TitleColumn, TemplateIDColumn, TypeQuestionIDColumn, DimensionIDColumn, IsQuestionConditionColumn, IsCalculateScoreColumn, QuestionJsonColumn}
	)

	return templQuestionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		UpdatedAt:           UpdatedAtColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedBy:           UpdatedByColumn,
		CreatedBy:           CreatedByColumn,
		Name:                NameColumn,
		Title:               TitleColumn,
		TemplateID:          TemplateIDColumn,
		TypeQuestionID:      TypeQuestionIDColumn,
		DimensionID:         DimensionIDColumn,
		IsQuestionCondition: IsQuestionConditionColumn,
		IsCalculateScore:    IsCalculateScoreColumn,
		QuestionJson:        QuestionJsonColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
